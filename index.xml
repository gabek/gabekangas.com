<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gabe Kangas</title><link>https://gabekangas.com/</link><description>Blog posts from Gabe</description><atom:link href="https://gabekangas.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Blogs</title><link>https://gabekangas.com/blog/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/</guid><description/></item><item><title>Decentralized discovery</title><link>https://gabekangas.com/blog/2022/08/decentralized-discovery/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2022/08/decentralized-discovery/</guid><description>&lt;p>Often the first thing brought up when discussing decentralized content is the difficulty of discovery. Big Tech has all these data points combining the content on their platform with all the consumers so they can make educated guesses to route people to content that benefit the platform, data brokers, advertisers, governments, and lastly somewhere down the line the consumers. How can those who want to opt out of those networks compete in this game? I argue that we don&amp;rsquo;t. &lt;strong>We play a different game.&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>Below are some broad topics I want to discuss around discovery. It&amp;rsquo;s not about any specific project or technology, it&amp;rsquo;s just my thoughts. However, before I go further I want to make something unequivocally clear. I want everyone to internalize this deep within their soul.&lt;/p>
&lt;div style='font-size: 4rem; text-align: center; line-height: 1.1'>The internet wants to be decentralized.&lt;/div>
&lt;p>It&amp;rsquo;s the default. &lt;strong>We literally have to do nothing to have a decentralized internet&lt;/strong>. Every service a person brings online is a new entry in this beautiful network that is connected by standards and available without gatekeepers. Every new web site adds to the grand tapestry that is the World Wide Web, sharing knowledge, content and experiences. Every new XMPP server allows a community to communicate with each other, and to the greater internet. Every new Fediverse node grows an interconnected social network with different views, rules, communities and content.&lt;/p>
&lt;p>On the flip side, &lt;strong>it takes an unbelievable amount of money, personnel and power to build a locked-in empire&lt;/strong>. Yet here we are, surrounded by locked-in empires.&lt;/p>
&lt;p>We&amp;rsquo;ve resorted to thinking discovery is an algorithm telling us what to consume, or a protocol feeding us the next &lt;em>something&lt;/em>. &lt;strong>But do you like this way of consuming?&lt;/strong> Is it even accurate? Do you want more machines feeding you content, or are we just used to it?&lt;/p>
&lt;p>To give my opinions some credence let&amp;rsquo;s quickly refer to a creator who uses a Big Tech platform for his livelihood. The &lt;a href="https://www.youtube.com/c/Nostalgianerd">Nostalgia Nerd&lt;/a> is a YouTuber with about half a million subscribers. He recently shared how his content isn&amp;rsquo;t getting to the people who care about it, and voiced his frustrations about content from smaller content creators not being able to reach those who would enjoy it.&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wK2LjQ7voN8?start=508" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;p>So he made some requests:&lt;/p>
&lt;ol>
&lt;li>Don&amp;rsquo;t rely on the algorithm. Proactively visit content you want to watch and follow them elsewhere to keep up to date.&lt;/li>
&lt;li>Go visit the 10 creators that he recommends.&lt;/li>
&lt;/ol>
&lt;p>And there lies the specifics of decentralized discovery.&lt;/p>
&lt;hr>
&lt;h2 id="topics-i-want-to-discuss">
Topics I want to discuss
&lt;a class="heading-link" href="#topics-i-want-to-discuss">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#curation">Curation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#so-no-algorithms-or-automated-discovery-then">Algorithms&lt;/a>&lt;/li>
&lt;li>&lt;a href="#interfaces">Interfaces&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ive-failed-at-building-decentralized-discovery-in-the-past">My previous attempts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#final-thoughts">And some final thoughts&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="curation">
Curation
&lt;a class="heading-link" href="#curation">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>What&amp;rsquo;s a proven way to discover content in a decentralized way? &lt;strong>Have people tell you about it.&lt;/strong>&lt;/p>
&lt;p>In the above example, purely out of frustration, The Nostalgia Nerd briefly pivoted from being a content creator who relied on the algorithm to a curator working around the algorithm.&lt;/p>
&lt;p>We&amp;rsquo;re natural curators. You tell your friends your favorite song, your favorite movie, your favorite writers. For others it&amp;rsquo;s far more formal. You have a newsletter with suggested links and topics, or a playlist with your favorite songs. Some people even make a living curating topics, news, recommendations or entertainment. This has been around forever, and as much as we pretend we&amp;rsquo;ve given ourselves up to the machine, human-powered curation is bigger than ever.&lt;/p>
&lt;h3 id="curation-examples">
Curation Examples
&lt;a class="heading-link" href="#curation-examples">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>Letterboxd&lt;/strong>&lt;/p>
&lt;p>I personally use &lt;a href="https://letterboxd.com/gabekangas/">Letterboxd&lt;/a> to discover movies and read reviews from everyday people. I don&amp;rsquo;t use an algorithm there, I instead browse through the &amp;ldquo;Best 50 dystopian sci-fi&amp;rdquo; list and pick one I haven&amp;rsquo;t seen yet.&lt;/p>
&lt;p>&lt;strong>Twitch Raids&lt;/strong>&lt;/p>
&lt;p>On Twitch you can &amp;ldquo;Raid&amp;rdquo; another live stream by sending all your viewers over to them. The streamer picks one live stream that they want their viewers to experience.&lt;/p>
&lt;p>&lt;strong>Content Journalism&lt;/strong>&lt;/p>
&lt;p>Blogs, newsletters, videos. For example, I always look forward to &lt;a href="https://www.snoozebutton.com/">Marc Ruxin&amp;rsquo;s end of year movie list&lt;/a> to see what films he&amp;rsquo;s suggested because I&amp;rsquo;ve always found his recommendations to be spot on with my tastes.&lt;/p>
&lt;p>&lt;strong>Old Skewl Stuff&lt;/strong>&lt;/p>
&lt;p>Remember Blogrolls? Webrings? Or pages on your site that listed &amp;ldquo;Friends&amp;rdquo;? I&amp;rsquo;m not saying we need to go back to those days, but those things, though they seem quaint now, served a real purpose. Maybe we can learn something from the past.&lt;/p>
&lt;p>&lt;strong>Social Media Accounts&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://fedinews.com/2022/02/feditips-a-great-way-to-discover-new-content/">FediVideo&lt;/a> curates video content on the Fediverse that people should check out. They do a fantastic job in helping people discover new content from across the Fediverse on different sites, servers and platforms.&lt;/p>
&lt;p>&lt;strong>Playlisting&lt;/strong>&lt;/p>
&lt;p>While I&amp;rsquo;m not going to tell you Spotify is a bastion of openness, it does lead to a modern example of curation. Spotify playlisting has become an industry. And while I wish they weren&amp;rsquo;t so &amp;ldquo;pay to play&amp;rdquo;, that&amp;rsquo;s kind of the beauty of it. There&amp;rsquo;s a place for commercial playlisting in the music industry, that&amp;rsquo;s nothing new. But right next to that commercial playlist is another one run by some indie music fan who wants to share their current favorites. This means you have options. You can look at both. You can compare and contrast.&lt;/p>
&lt;h3 id="bonuses-of-curation">
Bonuses of Curation
&lt;a class="heading-link" href="#bonuses-of-curation">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Different curators means different opinions. If you don&amp;rsquo;t think your viewpoint is represented, or an algorithm is biased, then you can take part in people&amp;rsquo;s discovery process using your thoughts and feelings instead.&lt;/li>
&lt;li>The content doesn&amp;rsquo;t have to be limited by technology. Build a site highlighting awesome photographers. Some are on Pixelfed, some use 500px, some on Facebook. Compare that to Instagram where they can only recommend Instagram accounts.&lt;/li>
&lt;li>You can start super small without any new tech required. Create a wordpress blog, open a Fediverse account, or just start emailing your friends.&lt;/li>
&lt;/ul>
&lt;h2 id="so-no-algorithms-or-automated-discovery-then">
So no algorithms or automated discovery then?
&lt;a class="heading-link" href="#so-no-algorithms-or-automated-discovery-then">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>While a part of me wants to go all Dune and &lt;a href="https://dune.fandom.com/wiki/Butlerian_Jihad">ban the thinking machines&lt;/a>, we all benefit from algorithms. However, as it stands there&amp;rsquo;s only one user-facing recommendation algorithm per Big Tech platform and it&amp;rsquo;s built, owned and operated by the same people who have different motives than the consumers and creators of the content. So it&amp;rsquo;s not that we shouldn&amp;rsquo;t trust &lt;em>all&lt;/em> algorithms, but it&amp;rsquo;s true that we can&amp;rsquo;t trust &lt;em>those&lt;/em> algorithms.&lt;/p>
&lt;p>So maybe there&amp;rsquo;s a place for us to build our own?&lt;/p>
&lt;h3 id="algorithms-require-lots-of-accurate-data">
Algorithms require lots of (accurate) data
&lt;a class="heading-link" href="#algorithms-require-lots-of-accurate-data">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Having different types of algorithms built by different people has been a dream for a long time, but it&amp;rsquo;s been impossible with our data being locked up in the halls of Big Tech services. The good news is if we decentralize our services, then we have the option to open up our data.&lt;/p>
&lt;p>However, even if we did open up all of our respective data, it gets difficult. Say we wanted to replicate the YouTube-style recommendation algorithm but using open data across multiple services. At the very least you&amp;rsquo;d be wanting to use view count to determine how &amp;ldquo;popular&amp;rdquo; a video is so you can recommend it to others. But with the nature of open data, how could you trust that count? Why wouldn&amp;rsquo;t somebody want to fake their view count in order to get bumped up in the algorithm?&lt;/p>
&lt;p>If we&amp;rsquo;re talking decentralized and open, then you can&amp;rsquo;t trust it, and there&amp;rsquo;s no way around that. No signing, no encryption, no authentication can build trust for completely open data when people &lt;strong>benefit from faking it&lt;/strong>.&lt;/p>
&lt;p>And while this has always been true, sometimes it doesn&amp;rsquo;t matter so much. Anybody could build a Fediverse node that lies about the number of followers they have. Sure, that&amp;rsquo;d be lame, but it wouldn&amp;rsquo;t really hurt anybody. However, if you use that number for active decision making, such as suggesting accounts to follow, then &lt;strong>it would be a big problem.&lt;/strong>&lt;/p>
&lt;h3 id="but-some-algorithms-could-work">
But some algorithms could work
&lt;a class="heading-link" href="#but-some-algorithms-could-work">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Take for example a decentralized discovery platform you use every day: The search engine. You put in some key words, and some algorithm, powered by completely open data, gives you suggestions that you can click on and navigate to.&lt;/p>
&lt;p>Clearly the biggest search engines are not positive examples when it comes to the exact implementations. But high level, this is how it&amp;rsquo;s supposed to work. And it could work for us too, with enough data and demand.&lt;/p>
&lt;h3 id="interfaces">
Interfaces
&lt;a class="heading-link" href="#interfaces">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Different types of content benefit from different interfaces. I&amp;rsquo;ve always been a fan of leveraging standards to allow people to opt into the interface that works best for them. Podcasts, for example, can be consumed with any Podcasting application because of RSS. You can pick and choose what feature set, platform and price works best for you. You also can change interfaces and applications over time, or use different ones in different scenarios.&lt;/p>
&lt;p>Using video as an example, let&amp;rsquo;s check out a couple ways content have been surfaced for discovery.&lt;/p>
&lt;p>&lt;a href="https://yarmo.eu/">Yarmo&lt;/a> built his own interface for surfacing Owncast streams he likes and called it &lt;a href="https://ownroll.yarmo.live/">&lt;em>Ownroll&lt;/em>&lt;/a>. This interface makes a lot of sense when talking about video streams.&lt;/p>
&lt;img src="https://gabekangas.com/blog/images/yarmo-ownroll.png"/>
&lt;p>PeerTube has a &lt;a href="https://search.joinpeertube.org/">search engine called Sepia&lt;/a> for discovering videos.&lt;/p>
&lt;p>Owncast has a &lt;a href="https://directory.owncast.online">directory&lt;/a> for streamers who choose to be public.&lt;/p>
&lt;p>Personally one way I enjoy discovering Owncast streams is I open an application on my AppleTV and it shows me a bunch of streams that are currently live. I navigate to one, and select it, and I watch the stream. This is because &lt;a href="https://owncast.online/docs/watching-on-tvs/#browsing-the-owncast-directory-on-your-tv">the Owncast directory offers up a standards-compliant way to access this data&lt;/a>.&lt;/p>
&lt;img src="https://gabekangas.com/blog/images/owncast-streams-appletv.png"/>
&lt;p>It&amp;rsquo;s very casual and I can lean back and look at my TV and &amp;ldquo;see what&amp;rsquo;s on&amp;rdquo;, just like people say about cable TV. This doesn&amp;rsquo;t &lt;em>feel&lt;/em> like decentralized content discovery and consumption. It just feels like content. &lt;strong>Just like going into the YouTube app, or the Netflix app&lt;/strong>.&lt;/p>
&lt;h2 id="ive-failed-at-building-decentralized-discovery-in-the-past">
I&amp;rsquo;ve failed at building decentralized discovery in the past
&lt;a class="heading-link" href="#ive-failed-at-building-decentralized-discovery-in-the-past">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>A handful of years ago I built an Internet Radio discovery platform called &lt;a href="https://gabekangas.com/blog/2017/04/introducing-longtail-music/">Longtail Music&lt;/a>. &lt;a href="https://gabekangas.com/blog/2019/12/goodbye-longtail-music/">It failed&lt;/a>.&lt;/p>
&lt;p>Internet radio is a fantastic example of a decentralized service. While there are some networks of stations, in general most stations are owned and operated by an individual who is doing it for the love of it. It&amp;rsquo;s also based on a standard protocol, so people can consume the audio in so many different ways. &lt;strong>It&amp;rsquo;s really great.&lt;/strong>&lt;/p>
&lt;p>I built something that would index all the music that these stations were playing, and then utilize potential listeners&amp;rsquo; music tastes either manually, or through streaming services, to determine stations they might like. Pretty straightforward, and I felt like everyone wins. The station owners get new listeners, and the listeners get introduced to a new, free, and very human way to consume music.&lt;/p>
&lt;p>I reached out to stations that I thought were doing a great job and said I was building a modern place to highlight quality internet radio and asked if they wanted to be featured. &lt;strong>Most said &amp;ldquo;no&amp;rdquo;&lt;/strong>. The reasons were mostly that they incorrectly thought I was trying to sell them something, and I was unable to convince them otherwise. Others thought I was a scammer trying to &amp;ldquo;steal&amp;rdquo; their content, or they thought linking to their content from other pages would &amp;ldquo;steal their listeners&amp;rdquo;. Mostly it was a general mindset that these people have been independently creating internet radio content for over a decade and assumed I was trying to screw them over somehow because nobody does anything for free.&lt;/p>
&lt;p>This mindset was &lt;em>extremely&lt;/em> common from people who owned internet radio stations. &lt;strong>The independence was fierce&lt;/strong>. I eventually found this to be an unwinnable battle. If you&amp;rsquo;re trying to do something for somebody, in this case trying to find listeners for an internet radio station, but they don&amp;rsquo;t want you involved, then ultimately I built something that just wasn&amp;rsquo;t wanted and gave up.&lt;/p>
&lt;h3 id="compare-this-to-video-streaming">
Compare this to video streaming
&lt;a class="heading-link" href="#compare-this-to-video-streaming">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Internet Radio, admittedly, is from a different era. And I say this in a positive way. It&amp;rsquo;s decentralized, independent, free, open, and wonderful.&lt;/p>
&lt;p>Compare this to live video streaming, for example. Here the default isn&amp;rsquo;t free, open, independent, decentralized or wonderful. It&amp;rsquo;s Twitch and YouTube and Big Tech and walled gardens. And the name of the game for all of these platforms is to get as many viewers as possible by any means possible. Some people who have opted to use something like Owncast to stream independently certainly don&amp;rsquo;t seem to have that overly aggressive mindset with regards to viewers, but I think most streamers would agree that it would be nice to have viewers and would love you to share their stream to your friends, or your site, or whatever.&lt;/p>
&lt;p>So it&amp;rsquo;s different. I&amp;rsquo;m not going to use my experience with Longtail Music to say &lt;em>&amp;ldquo;creators don&amp;rsquo;t want to be shared with others&amp;rdquo;&lt;/em>, because I don&amp;rsquo;t believe that to be true.&lt;/p>
&lt;h2 id="final-thoughts">
Final Thoughts
&lt;a class="heading-link" href="#final-thoughts">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I think we&amp;rsquo;re spoiled by algorithms, but it will be hard to trust completely open data in order to build our own. I personally believe we could use a human touch, but we don&amp;rsquo;t have enough people wanting to be curators to fill in the gaps. Maybe the tides will change and we&amp;rsquo;ll stop relying on centralized discovery so much and there will be a variety of options from different people.&lt;/p>
&lt;p>I did a lot of writing and I didn&amp;rsquo;t give a single, specific solution, and for that I apologize. If you were hoping for a protocol, a piece of tech, or a single standard that we can build upon you&amp;rsquo;re pretty disappointed. So to make up for that I&amp;rsquo;ll throw you my pie in the sky idea that I&amp;rsquo;d think about building if I wasn&amp;rsquo;t working on Owncast. Keep in mind this is just high level brainstorming.&lt;/p>
&lt;ul>
&lt;li>New ActivityPub powered project that accepts activities from all the decentralized services that speak ActivityPub.&lt;/li>
&lt;li>Unlike projects that are equally about creation &lt;em>and&lt;/em> consumption, this would be &lt;strong>consumption-only&lt;/strong>.&lt;/li>
&lt;li>It would follow ActivityPub actors from any service and accept activities from them.&lt;/li>
&lt;li>Things like: stream went live, video was published, blog post was posted, song was uploaded, event was scheduled, etc.&lt;/li>
&lt;li>Admins can create curated lists and sections and override the inevitable faked data.&lt;/li>
&lt;li>I imagine it kind of like a mixture between search results, old-school Yahoo (when it was a directory), and Tumblr, but without a timeline. Just a directory of stuff broken down by types and metadata.&lt;/li>
&lt;li>Just enough rendering of content to know what the content is and assist in discovery.&lt;/li>
&lt;li>Unlike software that do what they can to keep you within your &amp;ldquo;home server&amp;rdquo;, this would encourage you to go to the source of the content so you can discover more of it. People deserve the &amp;ldquo;click&amp;rdquo; to their actual server, not just embeds.&lt;/li>
&lt;li>It&amp;rsquo;s not meant to be the place you go to consume all the content you follow. So no home timelines, no algorithmic filtering.&lt;/li>
&lt;li>This project would have no direct affiliation with other projects as to have equal focus handling content from all types of services and encourage standards, no preferential treatment. Content server agnostic.&lt;/li>
&lt;/ul>
&lt;p>So there you go, an idea. Take it and run with it and I&amp;rsquo;ll make sure Owncast sends you all the data you need via ActivityPub.&lt;/p>
&lt;p>But clearly we need more people involved for any of this to matter. It can&amp;rsquo;t be &amp;ldquo;Owncast builds an Owncast directory, PeerTube builds a PeerTube search engine, PodcastIndex builds a Podcast search engine ok good enough&amp;rdquo;. From my perspective the Owncast directory is there to show examples of Owncast streams, not as &lt;em>the&lt;/em> solution for live stream discovery.&lt;/p>
&lt;p>The good news is believe it or not we&amp;rsquo;re in the best possible scenario. We have a diverse collection of people, technologies and ideas at our fingertips. Big Tech only has what it has: a small-minded bubble that doesn&amp;rsquo;t have people in its best interests. We can do better because we can do anything when we build it ourselves.&lt;/p></description></item><item><title>Ship software, not code</title><link>https://gabekangas.com/blog/2022/06/ship-software-not-code/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2022/06/ship-software-not-code/</guid><description>&lt;p>&lt;strong>Note from the editor. That&amp;rsquo;s me, Gabe. I&amp;rsquo;m the editor.&lt;/strong> I&amp;rsquo;ve had this blog post in draft status for a while, originally creating the outline for a possible conference talk. I didn&amp;rsquo;t write it to
be negative about any particular software, language, or approach. However, in the past day I&amp;rsquo;ve done some software installing and found myself experiencing much of what I wrote below. However, it&amp;rsquo;s still only a coincidence and I didn&amp;rsquo;t write this to be on the offensive against any one project.&lt;/p>
&lt;hr>
&lt;h2 id="software-and-code">
Software and code
&lt;a class="heading-link" href="#software-and-code">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Same thing, right?&lt;/strong> Well, no. You write code, and then you turn it into a software product people can run. I want to discuss how they are very different things, and the differences make a significant impact in how we approach empowering users with new tools and technologies. Especially in a time where giving people legitimate alternatives to centralized, big tech services is more important than ever.&lt;/p>
&lt;h2 id="so-what-is-software">
So what is software?
&lt;a class="heading-link" href="#so-what-is-software">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Take a moment to visualize what software is. &lt;strong>What does it look like?&lt;/strong> Some may think that&amp;rsquo;s a stupid question to ask about something so abstract, but it’s not at all abstract to me. When you say “software” this is what comes to mind.&lt;/p>
&lt;center>
&lt;a href="https://gabekangas.com/blog/images/shelf-of-software.jpg">
&lt;img src="https://gabekangas.com/blog/images/shelf-of-software.jpg" width="50%">
&lt;/a>
&lt;/center>
&lt;p>I think about walking into any big box store in the late 90s/early 2000s and going to their electronics department to see things like Microsoft Word, Doom, Print Shop, or Lotus 123 on the shelf. You could grab a box, bring it home, put it in your computer, and off you go. You were killing monsters, spreadsheeting, or printing out a banner before you knew it.&lt;/p>
&lt;p>What does this have to do with the topic of this post? Let&amp;rsquo;s start by picking a box of software off that shelf and ask yourself:&lt;/p>
&lt;ol>
&lt;li>What programming language was the software written in?&lt;/li>
&lt;li>What tools were required to build it?&lt;/li>
&lt;li>How were the dependencies managed in the development of this software?&lt;/li>
&lt;li>How is data persistence handled?&lt;/li>
&lt;/ol>
&lt;p>Let me make this easy for you, the answer for all of the above is &lt;strong>“who cares?”&lt;/strong>.&lt;/p>
&lt;h3 id="what-about-modern-software">
What about modern software?
&lt;a class="heading-link" href="#what-about-modern-software">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>Let’s ask those same questions for a modern piece of commercial software.&lt;/strong> While it&amp;rsquo;s not as common these days to walk into a store and bring a box home, you still buy it from a different kind of store and install it on your device.&lt;/p>
&lt;center>
&lt;a href=https://gabekangas.com/blog/images/android-productivity-apps.png">
&lt;img src="https://gabekangas.com/blog/images/android-productivity-apps.png" width="50%">
&lt;/a>
&lt;/center>
&lt;p>The answers to the questions are the same. &lt;strong>Nobody looking to run this software knows or cares how the software was built.&lt;/strong>&lt;/p>
&lt;p>Let’s look at a third example. This time some non-commercial, likely open source software. Say you wanted to host a little photo gallery to share pictures of your vacation with your friends. While it’s not boxed software, and it’s not something from a centralized App Store, it’s still fair to assume that we can just download it and run it. It’s just software, after all.&lt;/p>
&lt;center>
&lt;a href="https://gabekangas.com/blog/images/install-instructions.png">
&lt;img src="https://gabekangas.com/blog/images/install-instructions.png" width="50%">
&lt;/a>
&lt;/center>
&lt;p>Obviously something is different here. You&amp;rsquo;re being given code. And because of this not only do you know the answers to the original above questions, &lt;strong>you have to know the answers in order to begin the process of running anything.&lt;/strong>&lt;/p>
&lt;h2 id="obvious-disclaimer">
Obvious disclaimer
&lt;a class="heading-link" href="#obvious-disclaimer">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>While I don&amp;rsquo;t feel like I&amp;rsquo;m overly exaggerating in this post, I do want to make it clear that I don&amp;rsquo;t think &lt;em>everything&lt;/em> is as easy
as one command or one click.&lt;/p>
&lt;ol>
&lt;li>Obviously as requirements increase then users of software have to be aware of and meet those requirements.
&lt;em>However&lt;/em>, if one person wants to run one piece of software on one computer then yes&amp;hellip; it should be relatively low effort to allow them to do so.&lt;/li>
&lt;li>Some projects make this stuff a priority and package their Javascript or Python in a way where people can use it, but they are in the minority.&lt;/li>
&lt;li>If you only write software for yourself, to run personally or in a software-as-a-service scenario (a more and more common occurance), then do whatever you want.&lt;/li>
&lt;li>Lastly, I&amp;rsquo;m not saying that I&amp;rsquo;m perfect, but I do try to think about these things. And I&amp;rsquo;d like you to think about them with me.&lt;/li>
&lt;/ol>
&lt;h2 id="how-did-we-get-here">
How did we get here?
&lt;a class="heading-link" href="#how-did-we-get-here">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I wouldn’t normally blame the language for the output, but the language choice and tooling surrounding each language has created a cultural change around shipping software.&lt;/p>
&lt;p>As the open source movement exploaded, and languages like PHP, Javascript, Python and Ruby became popular, fewer and fewer people were writing software that was natively runnable. Similarly you have languages like Java where you were required to have an entire virtual machine installed to run the software.&lt;/p>
&lt;p>As &amp;ldquo;shipping source&amp;rdquo; became more common, the next step was inevitable. Developers simply pointed potential users to a repository of raw source code and said “good luck”.&lt;/p>
&lt;p>And while I&amp;rsquo;m being harsh here about choices we developers have made, I don&amp;rsquo;t place all the blame there. The developers using these languages haven&amp;rsquo;t been shipping software in a self-contained way because these tools simply don’t have a first-class way of doing so. However it is our fault when we collectively choose a tool because of the developer experience without thinking about the final shipped experience. It doesn&amp;rsquo;t seem like many Javascript developers are thinking &lt;em>&amp;ldquo;maybe I shouldn&amp;rsquo;t require my end user to know what npm is or force them to install node before they can play the game I made.&amp;quot;&lt;/em>&lt;/p>
&lt;h3 id="and-then-the-databases">
And then the databases
&lt;a class="heading-link" href="#and-then-the-databases">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>To make it all worse, we started treating database servers as a default dependency for almost any kind of software. Even for the most simple of data persistence cases. This means not only does a user have to understand how to get your software up and running, they have to understand how to spin up an entire database server just because you, as a developer, prefer to use PostgreSQL or MySQL. And don&amp;rsquo;t get me started when things require a relational database server AND Redis just to get running.&lt;/p>
&lt;h2 id="the-docker-workaround">
The Docker Workaround
&lt;a class="heading-link" href="#the-docker-workaround">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>As managing source code became more complex and developers wanted a way for potential users to not have to deal with it, many projects simply defaulted to shipping pre-configured container images as their only installation method.&lt;/p>
&lt;p>But I think we can all agree that if your software is so complex to install, with so many dependencies, that you’ve given up, and started shipping entire copies of a computer with it pre-installed, something is wrong.&lt;/p>
&lt;h2 id="why-does-this-matter">
Why does this matter?
&lt;a class="heading-link" href="#why-does-this-matter">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The responsibilities and knowledge required to be a software developer, such as managing runtimes, installing dependencies, and running raw source code, have been duplicated and handed to the user to also be made their problem.&lt;/p>
&lt;h3 id="who-cares">
Who cares?
&lt;a class="heading-link" href="#who-cares">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>People who run open source, or non-commercial software are deeply knowledgeable about package managers, tool chains and programming languages, and I shouldn’t be so worked up about how software is shipped to them, right?&lt;/p>
&lt;/blockquote>
&lt;p>Well there lies the problem. &lt;strong>We need to build solutions for anybody who wants it.&lt;/strong> The world is falling apart right now due to the centralization and control of big tech. We need small tech to empower individuals and fight back. In order for that to happen everybody needs access to the tools we&amp;rsquo;re building. This means more single-user software that you can download and run without heaps of dependencies, just like the boxed software we talked about above. Just like the software you can find on your phone&amp;rsquo;s app store. Software is meant to be run.&lt;/p>
&lt;p>If you build a free and open source Yelp alternative for people it doesn&amp;rsquo;t matter how good it is if people get stuck fixing Ruby Version Manager conflicts. If you build an awesome game, but your users only have python2 and you wrote it for python3, that&amp;rsquo;s one fewer person to enjoy your game. If you build a self-hosted Eventbrite but the community leader doesn&amp;rsquo;t know what Postgresql is, then what was the point of building it?&lt;/p>
&lt;p>Besides, even if the software was &amp;ldquo;&lt;em>just for techies&lt;/em>&amp;rdquo;, don&amp;rsquo;t they deserve a nice experience setting up your software, too?&lt;/p>
&lt;h2 id="so-lets-fix-this">
So let’s fix this
&lt;a class="heading-link" href="#so-lets-fix-this">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;h3 id="ship-binaries">
Ship binaries
&lt;a class="heading-link" href="#ship-binaries">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>The good news is I think we’re getting on the right track. Languages that focus on shipping compiled, runnable binaries are on the rise. Go and Rust being two examples that are visibly changing the culture of shipping software to users. &lt;strong>This needs to continue.&lt;/strong>&lt;/p>
&lt;p>I’m not saying don’t use Ruby, or don’t use Python. But what I am saying is if you’re writing something with the goal of other people running your software, you need to ship software they can run. And some languages are simply going to be better than others at having first-class ways to accomplish that.&lt;/p>
&lt;h3 id="databases">
Databases
&lt;a class="heading-link" href="#databases">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Let’s stop using external database servers as the default. Start with an embedded database like SQLite. If your software has the requirements then you can also offer a migration path to a larger database server. But a local, embedded database is fine for many more things than you think.&lt;/p>
&lt;h3 id="hosted-one-click-installs">
Hosted one-click installs
&lt;a class="heading-link" href="#hosted-one-click-installs">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>It&amp;rsquo;s a bit off topic, but it&amp;rsquo;s still completely relevant in making sure that more people can install your software. Sure, this involves &amp;ldquo;the man&amp;rdquo;, but it&amp;rsquo;s a decent compromise. It&amp;rsquo;s free for you to make sure your software is available on the marketplaces of major hosting providers and it allows people who don&amp;rsquo;t have the physical resources to run your software using monetary resources instead.&lt;/p>
&lt;h2 id="in-conclusion">
In conclusion
&lt;a class="heading-link" href="#in-conclusion">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Write code with the intention of shipping it as software. Code is not software.&lt;/p>
&lt;ol>
&lt;li>Let’s empower more people by getting more runnable software into their hands.&lt;/li>
&lt;li>When building, pick tools that let you do that.&lt;/li>
&lt;li>Chill it with the database requirements.&lt;/li>
&lt;li>Git and Docker aren’t installation methods.&lt;/li>
&lt;li>Any piece of software that requires the user to care, or even know, the details behind the scenes have failed the user.&lt;/li>
&lt;li>If you do exclusively software-as-a-service stuff and nobody needs to run your code but you, then do whatever you want.&lt;/li>
&lt;/ol></description></item><item><title>Being a part of a team</title><link>https://gabekangas.com/blog/2022/05/being-a-part-of-a-team/</link><pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2022/05/being-a-part-of-a-team/</guid><description>&lt;p>Growing up I was never a sports person, so I didn&amp;rsquo;t spend a lot of time on what you&amp;rsquo;d call &amp;ldquo;typical&amp;rdquo; teams. But I was heavily into the performing arts all throughout my youth. This included different organized groups such as choirs, theater performances, and both competitive and non-competitive bands of all kinds, including the stereotypical high school garage band. This continued on even after high school, where I took part in a couple competitive Drum &amp;amp; Bugle corps. I remember real gratification being a part of something special with people who are on the same page as you, working on a common
goal.&lt;/p>
&lt;p>But as everyone does, I grew up, took part in fewer activities, and focused on work.&lt;/p>
&lt;h2 id="corporate-teams">
Corporate Teams
&lt;a class="heading-link" href="#corporate-teams">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I think most people understand what work is and how it takes place. You show up at an office, and you get assigned coworkers. These coworkers are called your team. Maybe you&amp;rsquo;re on the engineering team, or the marketing team, or a leadership team of some sort. I never really though much of it. &amp;ldquo;These are my teammates!&amp;rdquo; I thought as I move through my career, one company after another, doing different things at different places.&lt;/p>
&lt;p>I never took a step back to really analyze what being a part of these teams looked like. But the pandemic changed things. So let me share it with you. As I have background in engineering teams, let&amp;rsquo;s use that as an example of what that looks like:&lt;/p>
&lt;ol>
&lt;li>A group of engineers are split into &amp;ldquo;cross-functional&amp;rdquo; groups of people to work on things.&lt;/li>
&lt;li>You show up to meetings consisting of &amp;ldquo;stakeholders&amp;rdquo; of this group, with people like a designer, a product manager, and a project manager.&lt;/li>
&lt;li>The product manager tells you how something is supposed to work.&lt;/li>
&lt;li>The designer tells you how it&amp;rsquo;s supposed to look.&lt;/li>
&lt;li>The project manager tells you the scheduling around the work.&lt;/li>
&lt;li>You go do the work, giving periodic updates, eventually letting them know when it&amp;rsquo;s done.&lt;/li>
&lt;li>Repeat.&lt;/li>
&lt;/ol>
&lt;p>The reality of the situation was far easier to mask before the pandemic. I would show up every day and and be around people. I&amp;rsquo;d be in the kitchen chatting while making coffee, we&amp;rsquo;d go to lunch. I&amp;rsquo;d do my work sitting next to these people. I&amp;rsquo;d look over and make a comment about something I just did. Being around people makes you, in some way, feel like you&amp;rsquo;re part of a team. The reality is actually quite different.&lt;/p>
&lt;ol>
&lt;li>The closest thing you have to a real &amp;ldquo;team&amp;rdquo;, your engineering peers, are immediately split up to make sure as much parallel work is happening at once.&lt;/li>
&lt;li>You never work &amp;ldquo;with&amp;rdquo; them.&lt;/li>
&lt;li>You never actually work &amp;ldquo;with&amp;rdquo; anybody.&lt;/li>
&lt;li>You&amp;rsquo;re on a team of one.&lt;/li>
&lt;/ol>
&lt;p>It&amp;rsquo;s like if an NBA team split up to compete in 1-1 games of horse or something. Sure, you can get together and discuss strategy in your daily standup, but you&amp;rsquo;re alone.&lt;/p>
&lt;h2 id="open-source">
Open Source
&lt;a class="heading-link" href="#open-source">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>As I moved through my adult, career-driven journey I always looked at open source projects with a sense of awe. There were these people, working together because they had a passion for it, not for the money like at a day job. I had this vision in my mind of wise cabals that work together to make a real difference for their users and combine to be greater than the sum of their parts.&lt;/p>
&lt;p>I&amp;rsquo;ve dreamt for years what it would be like to be a part of an open source community that operated this way. In my head it was a lot like that high school garage band. You are working &lt;em>together&lt;/em> because you &lt;em>love&lt;/em> it.&lt;/p>
&lt;p>I&amp;rsquo;ve had some &lt;a href="https://gabekangas.com/blog/2019/02/working-with-others-on-personal-projects/">misses in the past where things didn&amp;rsquo;t click&lt;/a>, and while that was disappointing, I never let the dream die.&lt;/p>
&lt;p>Owncast changed things. I made friends, and we worked together on a common goal, and I was &lt;a href="https://gabekangas.com/blog/2020/12/a-brief-update-on-owncast/">&lt;em>so happy&lt;/em>&lt;/a>. I saw this as a real team. And better yet, I had made real friends, something that that becomes more difficult, especially for men, as they get older.&lt;/p>
&lt;p>But it was short lived. Maybe I&amp;rsquo;m a bad project maintainer, or maybe I&amp;rsquo;m a bad person. Maybe people don&amp;rsquo;t like being around me, but those who I thought I was in that team with disappeared. I saw myself as the drummer in a kick ass band, but what I didn&amp;rsquo;t realize was I was an artist playing a drum solo hoping other people would eventually get on stage so we could start the song.&lt;/p>
&lt;p>Realistically, I&amp;rsquo;m not alone here. If you look at any open source project you&amp;rsquo;re probably going to see one person working on it, with a few contributors here and there. But for me I mistook casual contributors as friends, and that&amp;rsquo;s heartbreaking when you realize you were wrong.&lt;/p>
&lt;h2 id="conclusion">
Conclusion
&lt;a class="heading-link" href="#conclusion">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I can&amp;rsquo;t help but think at this point: As an adult, &lt;strong>have I ever been on a team&lt;/strong>? Maybe you haven&amp;rsquo;t been either.&lt;/p>
&lt;p>I might be slightly different, as the stereotype of the &lt;em>introverted software engineer&lt;/em> is a real thing. They&amp;rsquo;re not driven by the energy in the room or the relationship of the person next to them, they just want to be left alone to get their work done.&lt;/p>
&lt;p>But I never cared about any of these stupid companies I worked for, I cared about the room of people. Once there was no room of people, and all that was left was the &lt;em>divide and conquer&lt;/em> approach of corporate management I realized I couldn&amp;rsquo;t rely on work for a sense of connection.&lt;/p>
&lt;p>But at least I had my Owncast crew. Until they were gone too.&lt;/p></description></item><item><title>An exciting update about Owncast</title><link>https://gabekangas.com/blog/2021/06/an-exciting-update-about-owncast/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2021/06/an-exciting-update-about-owncast/</guid><description>&lt;p>Today in our periodic team sync-up call I announced to the Owncast team that we have been awarded a grant by the &lt;a href="https://nlnet.nl/">NLnet Foundation&lt;/a> to support work around federation and ActivityPub.&lt;/p>
&lt;p>This is super exciting, as NLnet have proven to be a steward of openness, standards and open source. Having approval from NLnet and allowing Owncast to join that community of &lt;a href="https://nlnet.nl/project/current.html">fantastic projects&lt;/a> really makes me believe that Owncast is going the right direction and caring about the right things.&lt;/p>
&lt;p>&lt;a href="https://nlnet.nl/project/Owncast/">Our project page on NLNet&amp;rsquo;s site is still empty&lt;/a>, but it&amp;rsquo;s there!&lt;/p>
&lt;p>While it&amp;rsquo;s still early days, and we&amp;rsquo;re getting our goals, approach and roadmap worked out, the major tent pole items I&amp;rsquo;m looking to address with this work is the following:&lt;/p>
&lt;ul>
&lt;li>Simply allowing people to &amp;ldquo;follow&amp;rdquo; Owncast servers for notifications and inline content, essentially replacing our stop-gap &lt;a href="https://botsin.space/@owncast">bot&lt;/a> that posts on behalf of servers if they opt into the directory.&lt;/li>
&lt;li>Support interoperability with PeerTube so Owncast content can show up in PeerTube interfaces, and possibly be able to show up in their search index.&lt;/li>
&lt;li>Use this as an open building block to allow people to build their own directories and communities to aggregate collections of Owncast servers. This is something that have been asked of us and instead of building an Owncast-specific way of doing this (like we&amp;rsquo;ve done with &lt;a href="https://directory.owncast.online">https://directory.owncast.online&lt;/a>) we can utilize standards, allowing people to follow any number of Owncast servers and build whatever kind of interfaces around that.&lt;/li>
&lt;/ul>
&lt;p>Things might change as the project is kicked off and more is learned, but this gives us the building blocks to take advantage of federation when future features get added to Owncast such as recordings being rendered inline, or scheduled events showing up in the right places so people know when to tune in to a live stream. If you have any ideas how Owncast content can live hand-in-hand with other federated services, please reach out!&lt;/p>
&lt;p>A big thank you to everyone who has supported Owncast, has setup an Owncast instance, or hung out watching an Owncast-powered live stream. Your feedback, support and content continues to push the project forward and allow us to make moves like this knowing that if we do a good job, real people will benefit from it.&lt;/p>
&lt;p>If you have any comments, questions or suggestions feel free to drop by our &lt;a href="https://owncast.rocket.chat">community chat&lt;/a>.&lt;/p></description></item><item><title>A personal update about career and the future</title><link>https://gabekangas.com/blog/2021/04/a-personal-update-about-career-and-the-future/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2021/04/a-personal-update-about-career-and-the-future/</guid><description>&lt;p>Before COVID hit I was about three years into working at a pretty cool company as an iOS engineer. I joined the company before the product launched and had a great time. But like things do, sometimes you grow apart when the company gets bigger and priorities change. So at the point everyone started working from home full time it became increasingly more difficult and I decided to leave the company. My plan was the lockdown would only last a few months, and once people started going back to their offices I&amp;rsquo;d get a new role somewhere.&lt;/p>
&lt;p>&lt;strong>We all know that didn&amp;rsquo;t happen.&lt;/strong>&lt;/p>
&lt;p>Luckily I&amp;rsquo;ve had some opportunities to do some short term gigs in the past year with a great agency who have been very kind to me. But I&amp;rsquo;ve found this completely disconnected and isolated approach to work as a short-term contractor to be very difficult for me. Starting new jobs or projects is always a confusing time and you rely on the people around you to get up to speed. I&amp;rsquo;ve had nobody around me for a year, and I&amp;rsquo;ve never met a single person I&amp;rsquo;ve been helping with projects outside of Zoom calls. This detached way of working on a project is incompatible with how I work. I need to be a part of a team working on a shared goal, not to be a left alone in my tiny apartment adrift for a year.&lt;/p>
&lt;p>Right now I find myself ending a project again soon. And this time I&amp;rsquo;m thinking maybe it&amp;rsquo;s best to get a full time job, as a part of a team, somewhere. It still won&amp;rsquo;t be easy working from home, but maybe being a part of a team would be a little bit better than being a contractor right now.&lt;/p>
&lt;p>Most of the past year I&amp;rsquo;ve been away from doing paid work so it gave me an opportunity to focus on something that matters to me, Owncast. But after a year of Owncast and sporadic work &lt;strong>I don&amp;rsquo;t actually know what role even makes sense for me anymore&lt;/strong>. I had previously focused on iOS development for over 10 years, but after a year of only doing a small bit of it, I no longer feel like an iOS engineer. And while I&amp;rsquo;ve been doing some Android contract work, I certainly don&amp;rsquo;t feel like an Android developer either.&lt;/p>
&lt;p>I feel most at home doing whatever it is I do for Owncast. I want to build cool shit for people without saying I only do mobile, or I only do backend, or whatever. But unfortunately there&amp;rsquo;s not really room at a company for a &amp;ldquo;do whatever is cool&amp;rdquo; role.&lt;/p>
&lt;p>It seems like I need to start a new chapter, but I don&amp;rsquo;t really know what that chapter is.&lt;/p></description></item><item><title>A brief update on Owncast</title><link>https://gabekangas.com/blog/2020/12/a-brief-update-on-owncast/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2020/12/a-brief-update-on-owncast/</guid><description>&lt;p>I &lt;a href="https://gabekangas.com/blog/2020/06/owncast-a-project-to-take-control-over-your-own-live-streaming/">made a post&lt;/a> when I pushed up my initial idea of &lt;a href="https://owncast.online">Owncast&lt;/a> to GitHub, but I haven&amp;rsquo;t posted any status updates to my own website since then. There&amp;rsquo;s been some significant traction lately, so I wanted to take a moment to write an update.&lt;/p>
&lt;p>We&amp;rsquo;ve been making steady progress under the radar with a fantastic group of people who have discovered the project. We knew that once we completed our Owncast web admin feature that we&amp;rsquo;d let a few more people know about the status of things, since it&amp;rsquo;s an added level of polish and ease of use that might appeal to people. Little did I know how this would explode.&lt;/p>
&lt;p>We ended up on the front page of Hacker News, the top of multiple subreddits, and have been the #1 trending project on all of GitHub for a couple days. My goal was to have something that was useful to people, and given the feedback from people who are actually setting up Owncast servers, I think we&amp;rsquo;re on the right track. Just like I hoped, people are super excited to go from zero to streaming in minutes, and they love the freedom and ownership over it. I have no idea how many new servers exist now, since anybody can download it and run it, but it&amp;rsquo;s exciting seeing the servers that choose to register with &lt;a href="https://directory.owncast.online">the directory&lt;/a> so we can visit some of the new streams.&lt;/p>
&lt;p>While I can say all of this has been unexpected, the thing that I never would have guessed is a community has started to spring up. I&amp;rsquo;ll visit people&amp;rsquo;s streams and other people who run Owncast servers or has worked on it will be in there chatting. Last night &lt;a href="https://stream.kylebronsdon.com/">Kyle Bronsdon&lt;/a> did a 4hr stream using Owncast for the first time and so many familiar names dropped in and were enjoying the music. The same goes with the &lt;a href="https://live.w0rmh0le.net/">nebunez&lt;/a> daily stream and when &lt;a href="https://stream.cincodenada.com/">Joel&lt;/a> is streaming himself working through Advent of Code. In the most literal and organic sense, it&amp;rsquo;s a decentralized community, but it&amp;rsquo;s not the technology binding them together. It&amp;rsquo;s just people who are enjoying being a part of something fun with other people. It&amp;rsquo;s hard to explain how cool that is, and I&amp;rsquo;m immensely thankful to everyone who has been a part of it.&lt;/p>
&lt;p>But it&amp;rsquo;s still early days! With all the added attention many more feature requests and pieces of feedback have come in. Every person who shares their thoughts helps influence the direction of the project, and I&amp;rsquo;ve made a few roadmap changes because of it.&lt;/p>
&lt;p>Thank you again to everyone, especially the &lt;a href="https://owncast.online/#contributors">contributors&lt;/a> and people using the software to do cool things. I&amp;rsquo;m very much looking forward to making Owncast something great with all of you.&lt;/p>
&lt;img src="https://gabekangas.com/blog/images/owncast-trending.png"/></description></item><item><title>Apple Has Shut Down The Bat Player</title><link>https://gabekangas.com/blog/2020/08/apple-has-shut-down-the-bat-player/</link><pubDate>Fri, 07 Aug 2020 09:41:48 -0700</pubDate><guid>https://gabekangas.com/blog/2020/08/apple-has-shut-down-the-bat-player/</guid><description>&lt;p>Today &lt;a href="https://apps.apple.com/us/app/the-bat-player-radio/id1050517930">The Bat Player on AppleTV&lt;/a> was shut down. I wanted to document a bit about the history of the application, and why it&amp;rsquo;s being rejected from the Apple AppStore.&lt;/p>
&lt;p>I started The Bat Player in 2014. I wanted a better Internet Radio experience on the TV. I dreamt of artist info, album details and photos. At the time most Internet Radio apps &lt;a href="https://gabekangas.com/blog/2014/12/developing-for-roku/">just showed text of the currently playing track&lt;/a> and I wanted more.&lt;/p>
&lt;p>I originally built The Bat Player for Roku, because that was the only set top box that had an SDK that I could build something on. And in July of 2015, &lt;a href="https://gabekangas.com/blog/2015/07/launching-the-bat-player-on-the-roku-store-and-its-aftermath/">The Bat Player launched for Roku&lt;/a>. But what I really wanted was to build for AppleTV. I really liked developing on Apple products but unfortunately at the time people weren&amp;rsquo;t permitted to build things for the AppleTV. Luckily that changed and I went all-in on tvOS as soon as I could.&lt;/p>
&lt;p>The first AppleTV build of The Bat Player was submitted to Apple on Oct 20, 2015. Right when the new AppleTV with tvOS apps were allowed.&lt;/p>
&lt;h4 id="the-2020-update-of-the-bat-player">
The 2020 update of The Bat Player
&lt;a class="heading-link" href="#the-2020-update-of-the-bat-player">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>The Bat Player uses a backend service I built called &amp;ldquo;The Bat Server&amp;rdquo; who takes a station and returns back rich metadata about the song, album, artist, etc. It&amp;rsquo;s what powers the Now Playing screen of the app as well as handling search, and the directory. It&amp;rsquo;s a Nodejs service that&amp;rsquo;s been quietly humming along giving The Bat Player it&amp;rsquo;s unique features. Fast forward to 2020 and my hosting provider said it&amp;rsquo;s no longer going to support long-running services and instead are focusing on JAMStack and &amp;ldquo;serverless&amp;rdquo; infrastructures. I thought &lt;em>&amp;ldquo;Cool, The Bat Server is a great example of something that would work well as discrete API endpoint functions&amp;rdquo;&lt;/em> and I went down the road of reworking the backend to fit the &amp;ldquo;&lt;a href="https://vercel.com/docs/v2/serverless-functions/introduction">serverless&lt;/a>&amp;rdquo; paradigm. It required a few client changes to make different requests than it used to, but not anything huge. A simple update to the client would resolve that.&lt;/p>
&lt;p>But it&amp;rsquo;s been a bit since I&amp;rsquo;ve made an update to The Bat Player, and it was time to give it some visual refresh, update some of the client architecture behind it, and make it even easier to use. So I simplified a lot of the code, using new features in iOS and Swift that didn&amp;rsquo;t exist before. I completely rewrote almost all of the UI in the app. I also added a new feature where if a station didn&amp;rsquo;t have an image, previously I&amp;rsquo;d do a Google Image Search in order to try to find the station image, now I generate a unique logo just for that station using a combination of images, fonts and colors. I&amp;rsquo;m really thankful to &lt;a href="https://github.com/gingervitis">Ginger&lt;/a> who designed the different images used to compile these dynamic station logos. They look super cool and I think people were really going to like them.&lt;/p>
&lt;p>So with both backend and frontend updates ready I submitted version 1.3.0 of The Bat Player to Apple on July 16th, knowing that on August 7th the old backend would get turned off.&lt;/p>
&lt;h4 id="the-rejection">
The rejection
&lt;a class="heading-link" href="#the-rejection">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;blockquote>
&lt;p>Your app contains content or features that may violate the rights of one or more third parties. Specifically, your app provides potentially unauthorized access to third-party audio or video streaming, catalogs, and discovery services.&lt;/p>
&lt;p>Your app and its contents should not infringe upon the rights of another party. In the event your app infringes another party’s rights, you are responsible for any liability to Apple because of a claim.&lt;/p>
&lt;/blockquote>
&lt;p>They said I am out of compliance with App Store Review Guideline 5.2.3. We went back and forth over messages until they scheduled a phone call. It was clear on this call they were treating The Bat Player, an internet radio client playing public internet radio stations, the same as if I was submitting an app that was stealing proprietary TV content. I think they&amp;rsquo;re so knee deep in the TV world right now that they can&amp;rsquo;t see it any different, they even kept calling internet radio stations &amp;ldquo;channels&amp;rdquo;, approaching it as I&amp;rsquo;m stealing somebody&amp;rsquo;s private media stream.&lt;/p>
&lt;p>They said in order to proceed &lt;strong>I need to provide legal documentation from every station&lt;/strong> stating I do indeed have rights to their content. I tried to explain that the point of Internet Radio is not to have propriety applications for each station, and instead &lt;strong>stations rely on apps like The Bat Player to play their audio streams&lt;/strong>, that&amp;rsquo;s the point of it. I used iTunes, Quicktime and Winamp as examples of applications that play Internet Radio. I pointed to the many applications that already exist on the AppStore that play this same content. I tried to state how Internet Radio clients are more like web browsers, where they exist only to consume and render the content that lives online for users. A web browser doesn&amp;rsquo;t need to show that it has permission to view every web site that exists. The reviewer only said &amp;ldquo;I can&amp;rsquo;t speak to other apps&amp;rdquo;. I said how I tie into a publicly accessible database of stations that exist for discovery purposes, and I would need to provide over 25,000 pieces of legal documentation. The reviewer on the phone simply said &lt;em>&amp;ldquo;I&amp;rsquo;m sure most of these channels are being run by the same company, so &lt;strong>you can get many taken care of by contacting their parent organizations&lt;/strong>.&amp;quot;&lt;/em> It showed that not only did they not understand how internet radio is often a hobby by somebody running something from their basement, &lt;strong>it showed that they couldn&amp;rsquo;t even fathom that the open internet, where individuals do things because they love it, and where content lives independently from applications that consume it.&lt;/strong> They&amp;rsquo;re thinking simply &amp;ldquo;if people want to watch CBS then they download the CBS app, you can&amp;rsquo;t be putting CBS in your app. That&amp;rsquo;s stealing.&amp;rdquo;&lt;/p>
&lt;p>Once you get rejected and you&amp;rsquo;re run out of options with the reviewer you have to &lt;a href="https://www.cnbc.com/2019/06/21/how-apples-app-review-process-for-the-app-store-works.html">contact the App Review Appeals Board&lt;/a>. And I sent the following final appeal:&lt;/p>
&lt;blockquote>
&lt;p>Hello,&lt;/p>
&lt;p>The Bat Player is an internet radio client, built to play publicly accessible internet radio streams. It is not scraping, hijacking, or stealing any content. It is more akin to a web browser that consumes web pages than something aggregating and playing proprietary video feeds, for example.&lt;/p>
&lt;p>I take advantage of a publicly accessible directory of internet radio stations called &amp;ldquo;radio-browser&amp;rdquo; who states in their FAQ:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;It is completely free. Free as in Beer/chocolate&amp;rdquo;
&lt;a href="http://www.radio-browser.info/gui/#!/faq">http://www.radio-browser.info/gui/#!/faq&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Internet radio is made to be played with different clients. It&amp;rsquo;s not like TV providers where each station has their own app and is only designed to exclusively be played in that app. Internet radio is to be played in iTunes, Quicktime, Winamp, or any of the below applications that are already on the AppStore who are using the radio-browser&amp;rsquo;s dataset API and playing the stations:&lt;/p>
&lt;ul>
&lt;li>Cute Radio: &lt;a href="https://apps.apple.com/de/app/cuterdio-internet-radio-app/id1489513385">https://apps.apple.com/de/app/cuterdio-internet-radio-app/id1489513385&lt;/a>&lt;/li>
&lt;li>Triode Radio: &lt;a href="https://apps.apple.com/us/app/triode/id1446513724">https://apps.apple.com/us/app/triode/id1446513724&lt;/a>&lt;/li>
&lt;li>InstaRadio: &lt;a href="https://apps.apple.com/us/app/instaradio-radio-player/id538537206">https://apps.apple.com/us/app/instaradio-radio-player/id538537206&lt;/a>&lt;/li>
&lt;li>Radio Volume Booster: &lt;a href="https://apps.apple.com/us/app/id887768699">https://apps.apple.com/us/app/id887768699&lt;/a>&lt;/li>
&lt;li>Frog Radio: &lt;a href="https://apps.apple.com/us/app/frogradio/id1442306286">https://apps.apple.com/us/app/frogradio/id1442306286&lt;/a>&lt;/li>
&lt;li>Tune Hunter: &lt;a href="https://apps.apple.com/at/app/tune-hunter/id1440690657">https://apps.apple.com/at/app/tune-hunter/id1440690657&lt;/a>&lt;/li>
&lt;li>432 Player Radio: &lt;a href="https://apps.apple.com/us/app/432-player-radio/id1479883396">https://apps.apple.com/us/app/432-player-radio/id1479883396&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I urge you to re-evaluate, as The Bat Player being pulled from the AppStore is a detriment to the open world of internet radio as well as to the tvOS ecosystem, something I, and The Bat Player, have been a part of since the launch of the tvOS SDK.&lt;/p>
&lt;/blockquote>
&lt;p>Today is the day the backend shut down and the application is no longer functioning. Apple isn&amp;rsquo;t replying. I could rebuild the old backend somewhere else and point the DNS records to it so the current client will hold on a little longer, but when you&amp;rsquo;re in a place where you&amp;rsquo;re no longer able to update or improve your application, that&amp;rsquo;s generally the end of the road. While the application hasn&amp;rsquo;t yet been pulled from the App Store, they&amp;rsquo;ve made it clear it&amp;rsquo;s no longer allowed to be there and it&amp;rsquo;s only a matter of time.&lt;/p>
&lt;p>On this last day of The Bat Player it sits on the tvOS AppStore with hundreds of active users. I hope they&amp;rsquo;ve enjoyed the time spent with the app, and that it helped them discover some new music via the on-screen data it surfaced. I&amp;rsquo;m sorry it can&amp;rsquo;t continue and they never got the updates.&lt;/p>
&lt;iframe src="https://player.vimeo.com/video/174542936" width="640" height="360" frameborder="0" allow="autoplay; fullscreen" allowfullscreen>&lt;/iframe></description></item><item><title>Owncast: A project to take control over your own live streaming</title><link>https://gabekangas.com/blog/2020/06/owncast-a-project-to-take-control-over-your-own-live-streaming/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2020/06/owncast-a-project-to-take-control-over-your-own-live-streaming/</guid><description>&lt;h3 id="backstory">
Backstory.
&lt;a class="heading-link" href="#backstory">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>In 2020 the world changed when everyone become stuck in their homes, looking for creative outlets to share their art, skills and themselves from inside their bedroom.&lt;/p>
&lt;p>This created an explosion of live streaming on Facebook Live, YouTube, Instagram, and Twitch. These services provided everything they needed, an easy way to live stream to the world, and a chat for users to be a part of their community.&lt;/p>
&lt;p>But in a world where many were previously finding ways to rely on the big internet service companies less, the 2020 COVID-19 pandemic made everyone run right back to them.&lt;/p>
&lt;p>And as soon as people started streaming their DJ sets, concerts, movie watching parties, and themselves just sitting around listening to music &lt;strong>the big companies came to &lt;a href="https://www.youtube.com/watch?v=cX6Xccx17gM">mute their audio, disconnect their streams, remove their recordings and ban these users all together.&lt;/a>&lt;/strong> &lt;a href="https://www.washingtonpost.com/entertainment/music/copyright-bots-and-classical-musicians-are-fighting-online-the-bots-are-winning/2020/05/20/a11e349c-98ae-11ea-89fd-28fb313d1886_story.html">Even if they owned the content&lt;/a>. These huge corporate entities legally have to shut anybody down at the even slightest hint of a copyright issue, or they put their own company at risk. Fair use and common sense be damned.&lt;/p>
&lt;p>That&amp;rsquo;s when I wanted a better option for people. Something you could run yourself and get all the functionality of these services, where you could live stream to an audience and and allow them to take part in the chat, just like they&amp;rsquo;ve been used to on all the other services. But instead of handing control over to somebody else, you run it. &lt;strong>You won&amp;rsquo;t get shut down, and you own it all, just like it should be.&lt;/strong>&lt;/p>
&lt;p>I figured you can install Wordpress and self-host your blog, or install Megento and self-host your e-commerce site. You can install Icecast and have your own internet radio station. Spin up an instance of Mastodon and you have your own social media site that you control. You can even install Nextcloud and have your own personal productivity service replacing Dropbox and Google Docs. There&amp;rsquo;s an open-source alternative to all the big services that you can run for almost everything, but I couldn&amp;rsquo;t think of what the live video streaming equivalent was. &lt;strong>There should be a independent, standalone &lt;em>Twitch in a Box&lt;/em>.&lt;/strong>&lt;/p>
&lt;p>So I set out to look at this and answer the question: &lt;strong>Can I build a self-hosted, open source solution that allows an individual to replace the live stream experience of the big social sites?&lt;/strong>&lt;/p>
&lt;h3 id="current-state">
Current state
&lt;a class="heading-link" href="#current-state">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>This is a work in progress.&lt;/strong> The web UI is being worked on and functionality is still being tested and iterated on. Feel free to test if you have some use for it and give feedback, but it&amp;rsquo;s not ready for production.&lt;/p>
&lt;p>That being said, I have something that works. I call it &lt;a href="http://owncast.online/">Owncast&lt;/a>. There&amp;rsquo;s a demo server up at &lt;a href="https://goth.land">goth.land&lt;/a> that I&amp;rsquo;ve been streaming random stuff to. Sometimes I&amp;rsquo;ll get on and stream something live, and sometimes I&amp;rsquo;ll put some pre-recorded video up like a concert, and sometimes I&amp;rsquo;ll just put a song on and show the current time so I can test the stream in relation to live. Ginger has volunteered to work on the included web page that has the player and chat UI because she&amp;rsquo;s a pro at web layout and design. So that&amp;rsquo;s all a work in progress.&lt;/p>
&lt;p>This is running on a $5/mo Linode server with other stuff running on it. The video itself is being distributed from AWS S3 and it works well. Equally well is allowing it to serve the files directly, but I wanted to test if adding an an additional layer muddied things up.&lt;/p>
&lt;h4 id="what-it-can-do-currently">
What it can do currently
&lt;a class="heading-link" href="#what-it-can-do-currently">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>It takes in a RTMP stream from a user and generates a HLS stream that&amp;rsquo;s embedded in a supplied web page.&lt;/li>
&lt;li>You can read and write to the chat in real-time from this page.&lt;/li>
&lt;li>Can serve video directly from itself.&lt;/li>
&lt;li>Can serve video via an AWS S3 bucket.&lt;/li>
&lt;li>Can serve video via &lt;a href="https://ipfs.io">IPFS&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="requirements">
Requirements
&lt;a class="heading-link" href="#requirements">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>An individual can take the existing software they&amp;rsquo;re using and instead of pointing it at a 3rd party, simply point it at their own service.&lt;/li>
&lt;li>It should be a single binary with all the built-in features. You shouldn&amp;rsquo;t have to run another web server or fight a bunch of dependencies.&lt;/li>
&lt;li>You should have options on where the actual video is distributed from to allow for flexibilty with bandwidth usage and performance.&lt;/li>
&lt;li>There should be complete control over the web page to the person running the stream. Plain HTML that is editable, or don&amp;rsquo;t use the included web page at all and just link to the video stream directly from elsewhere.&lt;/li>
&lt;li>There should be no accounts, database servers, or excessive state that needs to persist anywhere.&lt;/li>
&lt;/ul>
&lt;h3 id="things-of-note">
Things of note
&lt;a class="heading-link" href="#things-of-note">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>ffmpeg is the best in class as a video transcoder, so there&amp;rsquo;s no reason to not use it. So I am.&lt;/li>
&lt;li>Writing in Go allows me to build a single binary that people can download as a release for their platform without any need for dependency management or installing additional things via npm, gems, etc. It&amp;rsquo;s a great fit for a cross-platform &lt;em>&amp;ldquo;download and run&amp;rdquo;&lt;/em> mentality.&lt;/li>
&lt;li>People are used to using &lt;a href="https://obsproject.com/">OBS&lt;/a> as the standard for streaming their content. This sends a stream via RTMP, so building in a RTMP server allows people to just point OBS at their new server without any other changes.&lt;/li>
&lt;li>I&amp;rsquo;ve really enjoyed the &lt;a href="https://www.dnalounge.com/webcast/video.html">DNA Lounge web chat&lt;/a> they built for their live streams where you just type in your name and start chatting. No accounts, no authorization (for better or worse). So for now that&amp;rsquo;s the approach I want to take. It feels like it&amp;rsquo;s from a simpler time, and I like that.&lt;/li>
&lt;/ul>
&lt;h3 id="concerns-and-thoughts">
Concerns and thoughts
&lt;a class="heading-link" href="#concerns-and-thoughts">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Video is super bandwidth heavy. It remains to be seen how heavy and what the financial cost for offloading the video to S3 is. But if you have a host with a high transfer cap, then you&amp;rsquo;re fine and don&amp;rsquo;t need something like S3.&lt;/li>
&lt;li>Transcoding video is super CPU heavy. But at a single bitrate, on a cheap, low-powered server, it seems to be fine. It remains to be seen how it&amp;rsquo;ll work when adding support for adaptive bitrates.&lt;/li>
&lt;li>Offering a public chat opens up a whole lot of concerns regarding spam, harassment, etc. But those are all solved problems. Moderation can be added.&lt;/li>
&lt;/ul>
&lt;h3 id="specific-solutions">
Specific solutions
&lt;a class="heading-link" href="#specific-solutions">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>I wanted built-in support for offloading the actual video to other services. S3 was an obvious one. The video origin is the server that&amp;rsquo;s running the software, but the user actually pulls it down from S3 as to limit the amount of bandwidth being used on the local server. S3 is just where I started, but I plan on testing other S3 compatible services, as there are cheaper options out there than AWS like Wasabi, Backblaze and Linode. I felt starting with the most popular option made sense.&lt;/p>
&lt;p>I also added experimental support for &lt;a href="https://ipfs.io">IPFS&lt;/a>, a distributed way of transferring files around. I thought if the origin server adds the video to the IPFS network then the player, through an IPFS gateway, can download the file, alleviating the need to continue to need to go back to the origin server, just like the above S3 support. Except in this case IPFS is free, and it&amp;rsquo;s distributed. But it can also be very slow. But it works, when it&amp;rsquo;s not slow. That&amp;rsquo;s why I call this &amp;ldquo;experimental support&amp;rdquo;. I really love the idea of it, but more time and research needs to see if it&amp;rsquo;s possible. But it&amp;rsquo;s supported in Owncast and people can try it out.&lt;/p>
&lt;h3 id="a-note-about-cost">
A note about cost
&lt;a class="heading-link" href="#a-note-about-cost">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Keep in mind that while streaming to the big social companies is always free, &lt;strong>you pay for it with your identity and your data, as well as the identity and data of every person that tunes in.&lt;/strong> When you self-host anything you&amp;rsquo;ll have to pay with your money instead. But running a self-hosted live stream server can be done for as cheap as $5/mo, and &lt;strong>that&amp;rsquo;s a much better deal than selling your soul to Facebook, Google or Amazon&lt;/strong>.&lt;/p>
&lt;h3 id="whats-next">
What&amp;rsquo;s next?
&lt;a class="heading-link" href="#whats-next">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Since a testable version of functionality exists, I want to keep testing it and finding any gaps. I particularly want to find any limitations with computing or bandwidth to determine what cases it&amp;rsquo;s just not feasible to run your own streaming server, or if there are more requirements than I&amp;rsquo;m aware of. A part of this is also doing a lot of streaming and distributing the video via S3 and looking at the costs. I want to be able to give people a realistic price estimate if they want to hand off the video to a 3rd party in order to save their own bandwidth.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The web UI will also get updated so it&amp;rsquo;s actually something you want to look at and use.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I need to add support for generating multiple bitrates so adaptive switching can be possible. But that will add additional computing load, so more testing to see if that breaks things is needed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I&amp;rsquo;m far from a Go expert, so as time goes on I&amp;rsquo;ll be making better decisions and refactoring some of the proof of concept experiments into real code.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="why-did-i-write-this-post">
Why did I write this post?
&lt;a class="heading-link" href="#why-did-i-write-this-post">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>For two reasons. One, so when I&amp;rsquo;m talking about this project I can point people to a little more detail about it. And secondly, maybe somebody will read it and be interested in taking part in some capacity. It lives on &lt;a href="https://github.com/gabek/owncast">Github&lt;/a>, so feel free to check things out over there if you have interest in the subject, the project, writing some Go, or learning more about HLS video.&lt;/p></description></item><item><title>Some recent projects for my DJ mix hobby</title><link>https://gabekangas.com/blog/2020/05/some-recent-projects-for-my-dj-mix-hobby/</link><pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2020/05/some-recent-projects-for-my-dj-mix-hobby/</guid><description>&lt;p>While the lockdowns have been going on, and I haven&amp;rsquo;t been working (I&amp;rsquo;ll probably blog about that soon), I&amp;rsquo;ve been keeping busy with other projects.&lt;/p>
&lt;p>I&amp;rsquo;ve picked up a new hobby of &lt;a href="https://gabekangas.com/mixes/">doing some DJ mixes&lt;/a>, streaming them on internet radio, and recording them for sharing with friends. This has led me to building some tooling around all of this stuff that I think, for a small population, might find useful.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/gabek/supbox">Supbox&lt;/a>: A tool to get the currently playing track from &lt;a href="https://rekordbox.com/en/">Rekordbox v6&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/gabek/json-scrobbler">json-scrobbler&lt;/a>: Monitor a JSON file with track data in it, and scrobble the track to &lt;a href="https://www.last.fm/">Last.FM&lt;/a> when it changes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/gabek/markcast">Markcast&lt;/a>: Turn a directory of MP3 files into Markdown files, using the ID3 information.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="some-info-about-each">
Some info about each
&lt;a class="heading-link" href="#some-info-about-each">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;h4 id="supboxhttpsgithubcomgabeksupbox">
&lt;a href="https://github.com/gabek/supbox">Supbox&lt;/a>
&lt;a class="heading-link" href="#supboxhttpsgithubcomgabeksupbox">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>I&amp;rsquo;ve done a couple live mixes on &lt;a href="https://gabekangas.com/project/the-bat-station/">The Bat Station&lt;/a> and I like the idea of being able to share the metadata of the currently playing track. With the DJ software I use, Pioneer&amp;rsquo;s &lt;a href="https://rekordbox.com/en/">Rekordbox&lt;/a>, there&amp;rsquo;s no way to do that. So I built a tool that can detect tracks and write the metadata to files so other things can do things with it. Specifically I built it in for use with Rogue Ameba&amp;rsquo;s &lt;a href="https://rogueamoeba.com/audiohijack/">Audio Hijack&lt;/a>, the tool I use for streaming to The Bat Station. But I also added support for &lt;a href="https://obsproject.com/">OBS&lt;/a> because it&amp;rsquo;s so huge with live video streaming these days due to the lockdown. It can also just write to a generic JSON file so any other tool can take that data and run with it.&lt;/p>
&lt;h4 id="json-scrobblerhttpsgithubcomgabekjson-scrobbler">
&lt;a href="https://github.com/gabek/json-scrobbler">json-scrobbler&lt;/a>
&lt;a class="heading-link" href="#json-scrobblerhttpsgithubcomgabekjson-scrobbler">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>Speaking of another tool taking that JSON file and running with it, this tool simply monitors a JSON file of track information and then scrobbles the track to &lt;a href="https://www.last.fm/">Last.FM&lt;/a> so you can share what you&amp;rsquo;re listening to and keep aggregate listening stats. I made it to work as a companion to Supbox so I can scrobble while I play music in Rekordbox.&lt;/p>
&lt;h4 id="markcasthttpsgithubcomgabekmarkcast">
&lt;a href="https://github.com/gabek/markcast">Markcast&lt;/a>
&lt;a class="heading-link" href="#markcasthttpsgithubcomgabekmarkcast">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h4>
&lt;p>I built this to simplify distributing recordings I make. Ultimately in the form of blog posts and Podcasts. I use a &lt;a href="https://www.staticgen.com/">Static Site Generator&lt;/a> (specifically &lt;a href="https://gohugo.io/">Hugo&lt;/a>) to generate this web site. It takes a bunch of Markdown files and builds a web site out of it. It also renders a RSS feed. So I thought I&amp;rsquo;d use that as a jumping off point to add a &lt;a href="https://gabekangas.com/mixes/">section of my site for mixes&lt;/a> I&amp;rsquo;m doing while in lockdown, as well as generate a &lt;a href="https://gabekangas.com/mixes/index.xml">RSS feed&lt;/a> that people can use to subscribe to this as a Podcast.&lt;/p>
&lt;p>So it goes through each MP3 file, reads the ID3 information, and creates Markdown files that include a blurb of text extracted from the &lt;code>commend&lt;/code> tag, the image, and sets the &lt;code>genre&lt;/code> as a tag in the post. It also embeds a link to the audio in an &lt;code>audio&lt;/code> html tag so you can just play it directly.&lt;/p>
&lt;p>Also, as a bonus if you&amp;rsquo;re a Rekordbox user, if you save and record your sets using that software, Markcast will use the accompanying &lt;em>cue&lt;/em> file and add a playlist and approximate time to the post you generate.&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://gabekangas.com/mixes/">Check out some examples&lt;/a>&lt;/strong> by clicking on one of the mix titles.&lt;/p>
&lt;center>
&lt;img src="https://gabekangas.com/blog/images/2020-05-13-a-couple-dj-projects.jpg" width=60%>
&lt;/center></description></item></channel></rss>