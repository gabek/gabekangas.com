<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gabe Kangas</title><link>https://gabekangas.com/</link><description>Blog posts from Gabe</description><atom:link href="https://gabekangas.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Blogs</title><link>https://gabekangas.com/blog/</link><pubDate>Sun, 14 Jan 2024 09:46:12 -0800</pubDate><guid>https://gabekangas.com/blog/</guid><description/></item><item><title>Owncasts - A new iOS and tvOS application for viewing Owncast-powered live video streams</title><link>https://gabekangas.com/blog/2024/01/owncasts-a-new-ios-and-tvos-application-for-viewing-owncast-powered-live-video-streams/</link><pubDate>Sun, 14 Jan 2024 09:46:12 -0800</pubDate><guid>https://gabekangas.com/blog/2024/01/owncasts-a-new-ios-and-tvos-application-for-viewing-owncast-powered-live-video-streams/</guid><description>&lt;h2 id="owncast-is-server-software-thats-it">
Owncast is server software. That&amp;rsquo;s it
&lt;a class="heading-link" href="#owncast-is-server-software-thats-it">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>First off, I want to clarify: &lt;a href="https://owncast.online">Owncast&lt;/a> is server software for anybody to run their own, independent, decentralized, completely standalone video streams. It provides some additional features that streamers and their viewers can use, but at its core it&amp;rsquo;s a piece of video server software. That&amp;rsquo;s what I, personally, care about, and that&amp;rsquo;s primarily the value I want the project to offer you. Everything else is secondary.&lt;/p>
&lt;center>
&lt;a href="https://apps.apple.com/us/app/owncasts/id6451178968?platform=iphone">
&lt;img src="https://gabekangas.com/blog/images/owncasts-logo.jpeg" width="70%" />
&lt;/a>
&lt;/center>
&lt;h2 id="the-owncast-directory">
The Owncast Directory
&lt;a class="heading-link" href="#the-owncast-directory">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>With that out of the way: Early on, mostly as an experiment, I built the &lt;a href="https://directory.owncast.online">Owncast directory&lt;/a>. Not because Owncast should in any way be a centralized place to discover live video streams, but as a little side project to display examples of what Owncast is being used for by different people. I figured Owncast is a bit of a new concept, so being able to show how other people are using it might help clarify things. I never treated this as an “official” offering, or some kind of service to rival other services. I treated it like it could go away at any time and Owncast, at its core, wouldn&amp;rsquo;t change one bit. People would still be running their independent live streams without any impact. Because that&amp;rsquo;s how it&amp;rsquo;s supposed to work.&lt;/p>
&lt;p>Since then, I&amp;rsquo;ve been personally uneasy about having any centralized tools for Owncast streamers or viewers. But, I can&amp;rsquo;t argue that this directory does offer some nice to haves, and I do think people appreciate it. It fulfills a want, even if it&amp;rsquo;s not a need. I guess that&amp;rsquo;s ok. I do have some plans to expand how the directory works so it&amp;rsquo;s less centralized, is powered by ActivityPub, and enables anybody to do their own thing. But that&amp;rsquo;s a topic for another day.&lt;/p>
&lt;p>I never intended to expand the Owncast side projects further than that. But time went on, and I listened to viewers, and I saw a wider audience grow. More people who are used to YouTube and Twitch wanting to watch Owncast-powered streams, but wish they had similar tooling to do so.&lt;/p>
&lt;center>
&lt;img src="https://gabekangas.com/blog/images/owncasts-ios-browse-live.jpeg" width="30%"/>
&lt;img src="https://gabekangas.com/blog/images/owncasts-ios-browse-offline.jpeg" width="30%"/>
&lt;img src="https://gabekangas.com/blog/images/owncasts-ios-stream-portrait.jpeg" width="30%"/>
&lt;/center>
&lt;h2 id="i-want-for-you-something-i-cant-give-you">
I want for you something I can&amp;rsquo;t give you
&lt;a class="heading-link" href="#i-want-for-you-something-i-cant-give-you">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The fact that Owncast, as a project, doesn&amp;rsquo;t have any control over people&amp;rsquo;s servers is essential to me. It&amp;rsquo;s built on standards, so people on any platform, using a multitude of common applications, can watch any Owncast-powered stream. You could even build your own application built specifically for your stream. You don&amp;rsquo;t need me. Likewise, you don&amp;rsquo;t need the directory. Everything already exists for you to do your thing.&lt;/p>
&lt;p>I&amp;rsquo;ve heard stories of non-technical people refusing to watch an Owncast-powered stream because they like watching on their TVs or phone, and there&amp;rsquo;s no Owncast application they can simply download like they&amp;rsquo;re used to. I&amp;rsquo;ve wished streamers could say &amp;ldquo;Just search the app store for X and press play&amp;rdquo;. But I&amp;rsquo;m aware nobody is going to go build their own mobile apps.&lt;/p>
&lt;p>But I&amp;rsquo;ve always wished they did. I&amp;rsquo;ve always hoped that every Owncast streamer could have their own native applications to make it super easy for their viewers to watch their streams. I know the open web is super important, but I find native apps to be a really great experience, especially when it comes to media. I want Owncast servers to directly notify their viewers when they go live, and I want a way for people to watch on the TV without having to &amp;ldquo;cast&amp;rdquo; (I hate that word so much, this isn&amp;rsquo;t fishing).&lt;/p>
&lt;p>I thought about offering templated source code for a native app. Owncast streamers could just fill in the config with their server URL and they&amp;rsquo;d have their own app. But no matter how much I wish that would happen, I know streamers would never go through the effort to submit their own native app to the app stores. Everyone having their native app experience wasn&amp;rsquo;t going to happen, regardless how much I want it to. And given this is all in the spirit of independence and decentralization, that&amp;rsquo;s about all I can offer in that respect. I can&amp;rsquo;t do it for you.&lt;/p>
&lt;h2 id="i-didnt-mean-to-build-this-for-you">
I didn&amp;rsquo;t mean to build this for you
&lt;a class="heading-link" href="#i-didnt-mean-to-build-this-for-you">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Many months ago, due to a handful of personal reasons, I waned to do a little Apple development. I thought it&amp;rsquo;d be fun to build a little application for the AppleTV to make watching Owncast streams easier for me. And it doesn&amp;rsquo;t take a nuclear scientist in 1945 to know where this story goes from here. Within a couple of days I had built a pretty nice way to watch Owncast-powered streams on iOS and the AppleTV.&lt;/p>
&lt;p>I didn&amp;rsquo;t really know where I was going from there, but I found myself adding support for more of the Owncast APIs, many of the features that exist on the web, push notifications, and more.&lt;/p>
&lt;p>While the dream of every streamer having their own application wasn&amp;rsquo;t going to be possible, I could supply one application that is built for accessing people&amp;rsquo;s servers, even if they&amp;rsquo;re not publicly listed on the directory. But I&amp;rsquo;d have to be ok with being a gatekeeper of this single application. And honestly, I&amp;rsquo;m not really that ok with it. But I can try anyway.&lt;/p>
&lt;p>So here we are. A new experimental side project for Owncast viewers on iOS and tvOS. I call it &amp;ldquo;Owncasts&amp;rdquo;, because it&amp;rsquo;s just a place where you can watch Owncast-powered streams. It&amp;rsquo;s not &amp;ldquo;Owncast for iOS&amp;rdquo;. Owncast is server software.&lt;/p>
&lt;p>If you don&amp;rsquo;t like it, please pretend it doesn&amp;rsquo;t exist. If you don&amp;rsquo;t have Apple hardware, nothing changes for you. If you have an iPhone and don&amp;rsquo;t see the value in this, that&amp;rsquo;s absolutely fine. I&amp;rsquo;m not judging this by any success criteria, and I don&amp;rsquo;t know what, if anything, is next for it.&lt;/p>
&lt;center>
&lt;img src="https://gabekangas.com/blog/images/owncast-tvbrowse-profile.jpeg" width="70%"/>
&lt;/center>
&lt;h2 id="the-unfortunate-nature-of-apple-push-notifications">
The unfortunate nature of Apple Push Notifications
&lt;a class="heading-link" href="#the-unfortunate-nature-of-apple-push-notifications">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Unfortunately, if your Owncast server is not listed on the directory, this application will not be able to receive push notifications on behalf of your live stream. In this case it&amp;rsquo;s the directory that sends out the notifications, and if the directory doesn&amp;rsquo;t know about your server, and doesn&amp;rsquo;t know when you go live, then it simply can&amp;rsquo;t be helpful in that regard.&lt;/p>
&lt;p>I hate that this is the case. I wish every individual Owncast server could send its own push notifications, but due to how they work that&amp;rsquo;s simply imposable. This is a case where some centralization is required for this feature, and you cannot be 100% private and still take advantage of it. I&amp;rsquo;m sorry. I feel bad about it.&lt;/p>
&lt;center>
&lt;img src="https://gabekangas.com/blog/images/owncasts-ios-apns.jpeg" width="30%"/>
&lt;img src="https://gabekangas.com/blog/images/owncasts-ios-stream-portrait-menu.jpeg" width="30%"/>
&lt;/center>
&lt;h2 id="decentralized-user-interfaces">
Decentralized user interfaces
&lt;a class="heading-link" href="#decentralized-user-interfaces">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>One thing I&amp;rsquo;d like to see more of is the idea of a single interface of true decentralized content. We&amp;rsquo;re so used to user interfaces of centralized content. Almost every interface displays an array of content that is controlled exclusively by the server who&amp;rsquo;s displaying it. Every stream you see listed on Twitch is controlled by Twitch, every movie you see on Netflix is controlled by Netflix, every image on Instagram is controlled by Instagram.&lt;/p>
&lt;p>There aren&amp;rsquo;t many real examples of decentralized interfaces left. An RSS reader is a good example of a single interface full of content pulled in from different places. Or a Podcast client that&amp;rsquo;s downloading Podcasts from different places. Search engines fit this definition on the web. There used to be web directories of content, that&amp;rsquo;s how Yahoo got its start. You click on a link and it brings you to somewhere completely disconnected from the place you came from. That&amp;rsquo;s how the internet is supposed to work! All linked together, but not controlled by any one entity.&lt;/p>
&lt;p>This is what the directory has always been, and this is what &amp;ldquo;Owncasts&amp;rdquo; is. It&amp;rsquo;s just an interface trying to give you another way to help you consume decentralized content. When you add your own, private, streams to the application, you can almost treat it like a purpose built web browser. You put in an Owncast-powered URL, you can consume that content.&lt;/p>
&lt;center>
&lt;img src="https://gabekangas.com/blog/images/owncast-tvbrowse-live.jpeg" width="70%"/>
&lt;/center>
&lt;h2 id="what-is-this-not">
What is this not?
&lt;a class="heading-link" href="#what-is-this-not">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>You might be thinking &amp;ldquo;Cool, lots of Fediverse adjacent projects have iOS apps now!&amp;rdquo; No.&lt;/p>
&lt;p>Mastodon, the company, has an iOS app for their product. Pixelfed, has an iOS app, PeerTube is starting work on an iOS app. &lt;strong>This is not like &lt;em>any&lt;/em> of those.&lt;/strong>&lt;/p>
&lt;p>Those are dedicated focuses, with dedicated developers. Those organizations have those applications on their roadmap and feel they are important to drive their vision forward. Those have Jira boards and meetings and budgets. Those have designers. Those are investments into the future of their products and are important to them.&lt;/p>
&lt;p>That&amp;rsquo;s not what this is for Owncast. I don&amp;rsquo;t feel that about this. I don&amp;rsquo;t feel that about the directory, or any of the side projects that are centralized by Owncast as a project, or me as an individual. The only thing that matters is that you have server software to stream with.&lt;/p>
&lt;center>
&lt;img src="https://gabekangas.com/blog/images/owncasts-ios-stream-landscape.jpeg" width="70%">
&lt;/center>
&lt;h2 id="the-long-long-road-of-rejections">
The long, long road of rejections
&lt;a class="heading-link" href="#the-long-long-road-of-rejections">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://social.gabekangas.com/notice/AatxyxMNMccZlyuXJ2">I posted a couple months ago how I had given up on this project&lt;/a> because Apple found every possible reason to reject it, and I was not making any progress. But I took some time away, and I swapped out my feeling of defeat for defiance and kept at it. One law firm, one conversation with Craig Hockenberry, a series of appeals, and a bunch of creative workarounds later, somehow I made it over the finish line.&lt;/p>
&lt;p>I don&amp;rsquo;t want this to be a negative post about how much Apple sucks, but you might be interested in a high level list of a couple of the crazier rejection reasons.&lt;/p>
&lt;ul>
&lt;li>Apple said I was illegally accessing the Owncast Directory. The same directory the Owncast project itself operates.&lt;/li>
&lt;li>Any Owncast server that had a &amp;ldquo;Donate&amp;rdquo; link caused this application to get rejected, because Apple said it was it &amp;ldquo;collecting money without using in-app purchases&amp;rdquo;.&lt;/li>
&lt;li>It&amp;rsquo;s Apple, so of course there has to be a way to &amp;ldquo;report&amp;rdquo; a server, even though that doesn&amp;rsquo;t make much sense in a decentralized world. But if somebody does report one, it&amp;rsquo;ll send me a message. And like usual, if somebody deserves to be removed from the directory they will.&lt;/li>
&lt;li>Apple said I had no rights to show any of the streams listed in the directory in the application. Note they don&amp;rsquo;t care about the &lt;em>content&lt;/em> in the streams, just the ownership of the streams themselves.&lt;/li>
&lt;li>Apple at one point rejected the app and said the application shouldn&amp;rsquo;t even exist, because people should use the web version instead. I&amp;rsquo;m not joking.&lt;/li>
&lt;/ul>
&lt;center>
&lt;img src="https://gabekangas.com/blog/images/owncast-tvbrowse-offline.jpeg" width="70%"/>
&lt;/center>
&lt;h2 id="nsfa">
NSFA
&lt;a class="heading-link" href="#nsfa">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Any servers marked as NSFW on the directory get filtered out of the application completely. This should be no surprise. Apple doesn&amp;rsquo;t like bad words or naughty bits.&lt;/p>
&lt;p>So if you&amp;rsquo;ve set your server as NSFW for no reason, you might want to reevaluate that. Though, of course, you can manually add any Owncast-powered live stream to the app, regardless if it&amp;rsquo;s NSFW or not. So go nuts.&lt;/p>
&lt;h2 id="so-now-what">
So, now what?
&lt;a class="heading-link" href="#so-now-what">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Like the directory, I don&amp;rsquo;t expect this application to have super active development. Bugs will be fixed, and as new features get added to Owncast they might show up natively in the application as well. We&amp;rsquo;ll have to see.&lt;/p>
&lt;p>It&amp;rsquo;s not the most beautiful application in the world, as UI design has never been something I&amp;rsquo;m terribly good at. But I hope it&amp;rsquo;s functional enough. Maybe that can improve if there are specific things that come up, but I don&amp;rsquo;t anticipate the design of a side project being a focus for anybody.&lt;/p>
&lt;p>I thought about adding native chat. But that one addition has so many requirements, and is a large amount of additional work, with the different forms of authentication, and moderation, and text formatting, and handling of custom emoji and all of that. I did experiment with embedding the web chat into the application as a shortcut, but that&amp;rsquo;s a pretty lousy experience. Nobody should be surprised that web in a mobile app sucks. But maybe, one day, I&amp;rsquo;ll put in the substantial work to put in real chat if people cared enough. I think people might like that, but I&amp;rsquo;m not sure if it&amp;rsquo;d be enough people. You can let me know, and we can all play it by ear.&lt;/p>
&lt;p>You might notice this application is not open source, in the same way the directory is not open source. Why? Because neither of these projects got the attention and the dedication that the Owncast server software gets, and it would be irresponsible for me to say they are an open source project. They are not. You would not be able to build them, and I would not be able to support you if you tried. No documentation, no tests, no support, no even the littlest amount of thinking about anybody building and running it other than me. That&amp;rsquo;s not open source. It&amp;rsquo;s a true side project that I didn&amp;rsquo;t know if I would get approved, or would ever ship.&lt;/p>
&lt;p>All this being said, while I don&amp;rsquo;t plan on it, don&amp;rsquo;t be surprised if I accidentally build the Android version some day. But again, this all depends if this kind of thing is useful to people. The Owncast project is not in the business of building mobile applications, but it is in the business of helping people get their live streams out to the world. So if this helps, great. If not, that&amp;rsquo;s ok too.&lt;/p>
&lt;p>At the very least this won&amp;rsquo;t be the last conversation around purpose-built applications for viewing Owncast-powered live video streams.&lt;/p>
&lt;p>Keep on streamin&amp;rsquo;. Or viewin&amp;rsquo;. Or whatever you do, as long as it&amp;rsquo;s cool, keep doing some more of that.&lt;/p>
&lt;p>&lt;a href="https://apps.apple.com/us/app/owncasts/id6451178968?platform=iphone">Owncasts for iOS and tvOS&lt;/a>&lt;/p>
&lt;h2 id="thank-yous">
Thank yous
&lt;a class="heading-link" href="#thank-yous">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.iconfactory.com/author/craig/">Craig Hockenberry&lt;/a> from &lt;a href="https://apps.iconfactory.com/">Icon Factory&lt;/a> helped me work around one of the iOS guidelines I was having problems getting approvals with. This application would not have made it through app review without him.&lt;/p>
&lt;p>&lt;a href="https://yannicklung.com/">Yannik Lung&lt;/a> did the icon design for the iOS and tvOS applications and I absolutely love how they came out.&lt;/p>
&lt;p>The &lt;a href="https://www.sheppardmullin.com/">Sheppard Mullin Law Firm&lt;/a>. I wish I was joking.&lt;/p>
&lt;p>&lt;a href="https://danieldavis.app/">Daniel Davis&lt;/a> for being my &amp;ldquo;Apple can suck it, but I&amp;rsquo;m still doing this anyway&amp;rdquo; sounding board for many years.&lt;/p></description></item><item><title>Thank you for making Owncast a success in 2023</title><link>https://gabekangas.com/blog/2024/01/thank-you-for-making-owncast-a-success-in-2023/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2024/01/thank-you-for-making-owncast-a-success-in-2023/</guid><description>&lt;p>I missed the first week of the year, but I still wanted to write a bit about Owncast and share my appreciation what this past year has brought for Owncast.&lt;/p>
&lt;p>As every year before it, Owncast has had the opportunity to be used to solve more people&amp;rsquo;s live streaming needs, be viewed by more people, and have more conversations around decentralization, Big Tech alternatives, The Fediverse, and all the wonderful things that come along with being a part of Owncast.&lt;/p>
&lt;h2 id="development">
Development
&lt;a class="heading-link" href="#development">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>From the development standpoint, by far, the biggest effort this year was the &lt;a href="https://gabekangas.com/blog/2023/02/owncast-v0.1.0-retrospective-frontend-web-rewrite/">rewrite of the Owncast user interface&lt;/a>. This was also, by far, the largest effort by numbers of contributors. Switching to React and TypeScript was a huge win for the project. It opened the doors for frontend contributors for the first time, and I&amp;rsquo;m thankful every day I made that decision. I&amp;rsquo;m very proud of all all the work everyone had put into that effort, and it continues to pay off as we continue to more easily work on the frontend, fixing bugs and adding features.&lt;/p>
&lt;p>There&amp;rsquo;s a &lt;a href="https://owncast.online/roadmap">roadmap&lt;/a> of upcoming plans that I&amp;rsquo;m really looking forward to getting to. There&amp;rsquo;s a lot of behind the scenes stuff taking place before the really fun and fancy user-facing features come to light, but I think it&amp;rsquo;ll all be worth it.&lt;/p>
&lt;h2 id="ubuntu-summit">
Ubuntu Summit
&lt;a class="heading-link" href="#ubuntu-summit">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>One of the highlights personally was being given the opportunity to travel to Riga, Latvia to &lt;a href="https://www.youtube.com/watch?t=515&amp;amp;v=sZMEuKI4Lpo&amp;amp;feature=youtu.be">speak at Ubuntu Summit&lt;/a> about Owncast. It was a fantastic experience, and I&amp;rsquo;m very thankful to Cononical for the chance to share Owncast with more people. In general the attendees of the conference really seemed to be impressed with the direction of the project and the value it&amp;rsquo;s providing to users.&lt;/p>
&lt;h2 id="often-people-cant-find-a-way-to-talk-about-owncast">
Often people can&amp;rsquo;t find a way to talk about Owncast
&lt;a class="heading-link" href="#often-people-cant-find-a-way-to-talk-about-owncast">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>One problem that has continued to be difficult this year, and will continue to, is people&amp;rsquo;s expectations of Owncast, and how to interpret it.&lt;/p>
&lt;p>People, in general, are used to talking about multiuser &lt;em>services&lt;/em>. Like Facebook, or Instagram, or Twitch, or Mastodon, or Pixelfed, or Spotify. Things anybody can sign up to and use. These things are really easy to talk about. And Owncast will never be that. It&amp;rsquo;s not meant to be that. Owncast isn&amp;rsquo;t a public service. It&amp;rsquo;s &lt;em>software&lt;/em>. Like computing used to be. You wanted your computer to do something? You downloaded the software, you installed it, and now your computer does that thing. People don&amp;rsquo;t do that anymore, so people find it confusing. People want to go to a website and have somebody else run the software for them.&lt;/p>
&lt;p>They want unlimited users to be serviced, just like Facebook does. The concept of a person installing software that is just for that single person seems weird these days. So I get asked &amp;ldquo;How many channels can Owncast have?&amp;rdquo; Do you mean streams? One. Yours. It&amp;rsquo;s for you. I&amp;rsquo;m not sure how to make that more clear. It used to be the norm.&lt;/p>
&lt;p>I often get questions like &amp;ldquo;How many users does Owncast have?&amp;rdquo; And I don&amp;rsquo;t know what that question means. What&amp;rsquo;s a user? Do you mean how many downloads? Do you mean how many servers are online? I have no idea, servers are private. Do you mean how many viewers are watching streams? I have no idea. Streams are private.&lt;/p>
&lt;p>It also means most success stories are behind the scenes, and that sometimes leads to people comparing it to services like PeerTube and thinking Owncast is failing, or isn&amp;rsquo;t any good, or is useless, or whatever it is they think. That can&amp;rsquo;t be further from the truth.&lt;/p>
&lt;p>So you can see how people get frustrated and just blow off Owncast completely because they can&amp;rsquo;t get excited about something they can&amp;rsquo;t quantify. They can look at Pixelfed and say exactly &amp;ldquo;Look how many users they have!&amp;rdquo; or &amp;ldquo;Look how successful these accounts are!&amp;rdquo; and they&amp;rsquo;ll &lt;em>never&lt;/em> be able to do that with Owncast. And that&amp;rsquo;s okay. I just keep doing my own thing, and I try to explain when I can that it&amp;rsquo;s comparing Apples and Oranges.&lt;/p>
&lt;h2 id="thank-you-to-the-silent-successes">
Thank you to the silent successes
&lt;a class="heading-link" href="#thank-you-to-the-silent-successes">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>That being said, thank you to the many people and companies who are quietly relying on on Owncast to power their live video infrastructure. The churches, the porn sites, the conferences, the music venues, the wedding halls, and so many more that we&amp;rsquo;ll never hear spoken about. They&amp;rsquo;ll never be on the Fediverse or the directory. They&amp;rsquo;re not looking for viewers or attention. You&amp;rsquo;ll never know who they are. They&amp;rsquo;re just doing their thing successfully with Owncast. It is a complete honor to help them in some way, just like so many pieces of software have helped me over the years.&lt;/p>
&lt;h2 id="to-those-streaming-publicly-with-owncast">
To those streaming publicly with Owncast
&lt;a class="heading-link" href="#to-those-streaming-publicly-with-owncast">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Thank you to those who keep running Owncast streams regardless if the majority of their viewers are there, or just a small minority. I&amp;rsquo;ve seen hundreds of Owncast-powered streams disappear after a week of waning enthusiasm because viewers didn&amp;rsquo;t magically show up. So when I see a live stream using Owncast publicly stream week after week, month after month, year after year, don&amp;rsquo;t think I don&amp;rsquo;t notice. It means everything. These are the people building the version of the internet I want to be a part of. They&amp;rsquo;re building their own thing, regardless what other people think. I don&amp;rsquo;t have the words to express how much that means to me.&lt;/p>
&lt;h2 id="thank-you-to-the-vocal-advocates">
Thank you to the vocal advocates
&lt;a class="heading-link" href="#thank-you-to-the-vocal-advocates">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Those who care about the project, the vision, and the direction regardless if they&amp;rsquo;re actively streaming or not. I see all of you. It means the absolute world to me every time you say something nice about Owncast. It goes into a little bucket of motivation that I can pull from when I&amp;rsquo;m feeling down, frustrated, lonely, or that people don&amp;rsquo;t care. Thank you. I&amp;rsquo;ve been incredibly lucky to have people be so kind towards to me and the project, I can&amp;rsquo;t imagine others have it so good.&lt;/p>
&lt;h2 id="donors-have-really-helped-this-year">
Donors have really helped this year
&lt;a class="heading-link" href="#donors-have-really-helped-this-year">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The financial support this year have been a lifesaver. At one point in the year I needed to acquire the services of a law firm to help with some paperwork. Mostly around clarification around the directory, what Owncast is, what it isn&amp;rsquo;t, what we provide, what we have control over, etc etc. The kind of thing I can provide next time I get a DMCA takedown (this is not uncommon). Without the donations I would have had to pay for that out of pocket, and it would have been a huge financial burden. So thank you to everyone who has donated, and continues to donate. It&amp;rsquo;s these kind of big expenses that come up that I&amp;rsquo;m able to handle because of your support, and I&amp;rsquo;m incredibly thankful for that.&lt;/p>
&lt;h2 id="community-outreach">
Community outreach
&lt;a class="heading-link" href="#community-outreach">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Near the end of 2023 there began some really great initiatives around building more of a true community around Owncast. Since, in general, most Owncast-powered live streams are pretty isolated. People need to stream, so they install Owncast, and then they stream, they don&amp;rsquo;t exactly hang out and talk about Owncast with others. So it&amp;rsquo;s been a challenge to build a community around Owncast. But &lt;a href="https://owncast.mxks.dj/">MXKS&lt;/a> offered to &lt;a href="https://owncast.online/newsletter/">start a monthly Owncast newsletter&lt;/a> as a first step into reaching out to those who are interested in being a bit more connected into the world of Owncast and the streamers who use it. There has been an issue already, and people seem to like the idea. I&amp;rsquo;m looking forward to seeing where it goes. Please do sign up if you&amp;rsquo;re interested.&lt;/p>
&lt;p>Feel free to drop into the &lt;a href="https://owncast.rocket.chat/channel/owncast-community">community chat&lt;/a> if you&amp;rsquo;d like to discuss the future of this initiative. Everything is on the table to make it easier for people to connect with each other, share their experiences, and help each other out. But it&amp;rsquo;s not up to me!&lt;/p>
&lt;h2 id="2024">
2024
&lt;a class="heading-link" href="#2024">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I&amp;rsquo;m looking forward to 2024. There&amp;rsquo;s some really exciting things on the roadmap, and the behind he scenes stuff are equally going to improve working on the project. I hope to continue to balance features that improve the life of all streamers, regardless what their focus is, but also get to some specific things for the &amp;ldquo;interactive/twitch-style&amp;rdquo; streamer.&lt;/p>
&lt;p>I&amp;rsquo;m also looking forward to getting some ways out there to allow more people to easily view Owncast streams easier. Hopefully that&amp;rsquo;s on the horizon soon.&lt;/p>
&lt;p>Not everything goes fast with this project. I&amp;rsquo;m super appreciative that we get handfuls of contributions these days, but drive by contributions are usually not a good fit for working on really large, long-term feature work. But thankfully everyone has always been patient with me, and everyone is really thankful when they get released.&lt;/p>
&lt;p>That being said, if you&amp;rsquo;re interested in being a longer-term contributor to Owncast, and working on some of these exciting features that are coming up, I&amp;rsquo;d love to chat!&lt;/p>
&lt;p>Here&amp;rsquo;s to another year of creative, independent, decentralized live streaming. I hope I, and Owncast, can continue to play some part in it with you.&lt;/p></description></item><item><title>Upcoming Owncast features</title><link>https://gabekangas.com/blog/2023/04/upcoming-owncast-features/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2023/04/upcoming-owncast-features/</guid><description>&lt;p>While I try to keep a &lt;a href="https://owncast.online/roadmap">public roadmap&lt;/a>, and keep a reasonable plan for Owncast, I rarely have an opportunity to gush to anybody (other than my therapist, and he doesn&amp;rsquo;t get it) about features I’m looking forward to building. So I thought I’d write a quick blog post to share some of my personal thoughts on my vision of future Owncast features from a high level.&lt;/p>
&lt;h2 id="the-frontend-rewrite">
The frontend rewrite
&lt;a class="heading-link" href="#the-frontend-rewrite">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Owncast has been going through a &lt;a href="https://github.com/owncast/owncast/milestone/18">large frontend rewrite&lt;/a> over the past year. And this wasn’t done lightly. It was done because I strongly felt if I wanted to build the features I had envisioned I wasn’t going to get there with the current frontend architecture, capabilities and tooling. So once this ships, I can get back to building features again! I’m really looking forward to that.&lt;/p>
&lt;p>Admittedly I have some backend infrastructure refactoring planned once the frontend ships, but I do expect that to be more straightforward since it doesn&amp;rsquo;t require UI.&lt;/p>
&lt;h2 id="powered-by-activitypub">
Powered by ActivityPub
&lt;a class="heading-link" href="#powered-by-activitypub">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Practically every one of these features are backed by ActivityPub, and therefore supports federating with the Fediverse in some capacity. While some of these features may not have any available external interface to them yet, I hope some day for that to change. I&amp;rsquo;d love to work with more platform developers to make that happen. I&amp;rsquo;m super into the idea of robust Fediverse platform interoperability and I can&amp;rsquo;t wait to see what we can build together.&lt;/p>
&lt;h2 id="scheduled-streams">
Scheduled streams
&lt;a class="heading-link" href="#scheduled-streams">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The first big one I’m looking forward to are scheduled streams. The ability to say “I stream at 7:30 every Tuesday” or “This Friday I have an event at 6pm”. It will be a really nice thing to feature on the Owncast stream page itself, so when you visit a stream that’s offline it tells you when you might want to come back. But that’s not the most interesting thing.&lt;/p>
&lt;p>People will be able to subscribe to a calendar so they have this schedule available to them wherever they are, so the real fans are always up to date. Additionally I can propagate this scheduled data to the Fediverse, updating the server’s profile info to include the next stream info, and inform followers that a stream is coming up soon. It’s all about informing people via different ways that something they might care about is coming up. I’m super excited about adding this functionality and I think it’ll benefit streamers and viewers alike.&lt;/p>
&lt;p>I&amp;rsquo;d also love for these events to be actionable on the Fediverse. I&amp;rsquo;ve looked into what it would take to &lt;a href="https://github.com/owncast/owncast/issues/2375">federate with Mobilizon&lt;/a> but that doesn&amp;rsquo;t look possible. But if you know anybody over on that project, send them to me! Additionally, wouldn&amp;rsquo;t you like seeing an Owncast event come through your Mastodon timeline and there could be an explicit &amp;ldquo;see event&amp;rdquo; button or something built right in? Tell your friends who build your favorite microblogging Fediverse platform!&lt;/p>
&lt;h2 id="replays">
Replays
&lt;a class="heading-link" href="#replays">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Next is a category of features I call “replays”. Some people want &amp;ldquo;archival&amp;rdquo;, meaning a bunch of video files they can download, but that&amp;rsquo;s not the goal here. I explicitly call these “replays” because that’s the point, for a viewer to be able to re-play part or whole of a stream.&lt;/p>
&lt;p>The plan is to start with clips. And while that’s technically more challenging, with more UI and requirements from my side, I believe it has the most value. I think being able to share highlights of a stream will help grow people’s viewership more than entire streams.&lt;/p>
&lt;p>I would also love for these clips to be Federated with PeerTube, but my expectations of that is going to stay low for now unless I can get some help from them to open things up and allow federating with non-PeerTube ActivityPub instances. Anybody know anybody at PeerTube? I’d love to chat.&lt;/p>
&lt;p>The entire replay project will be large, with a lot of design and UI requirements that admittedly I’m worried about. As I’ve &lt;a href="https://gabekangas.com/blog/2023/02/owncast-v0.1.0-retrospective-redesign/">blogged about in the past&lt;/a> I’ve had a near impossible time getting design help, and it’s by far the skill set I have the hardest time with. So it’s going to be a long journey to get to where I’m trying to get to. But I’ll cross that bridge when I get to it.&lt;/p>
&lt;h2 id="mini-directories">
Mini Directories
&lt;a class="heading-link" href="#mini-directories">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Something that people have asked for is to be able to run their own Owncast directories. The thought is that some communities and groups would like to be able to run multiple Owncast instances and have a way to link them all together. And while I’ve always thought that would be interesting, I’ve never been able to justify starting yet another rather large standalone software project that needs to be built, documented, supported, updated, etc for just a couple of people. It’s not as simple as open sourcing the current &lt;a href="https://directory.owncast.online">Owncast directory&lt;/a> site for a number of reasons.&lt;/p>
&lt;p>So the solution I’m looking at is essentially making every Owncast server to be a mini directory. Via ActivityPub (the standardized protocol that powers the Fediverse), each Owncast server will “Follow” other servers, and then the servers would federate between each other things like stream status (live/offline), schedule, and more. They could even list non-Owncast instances in their directory, as long as they are on the Fediverse. This means you could add PeerTube channels in your Owncast mini directory if you wanted to. But of course they wouldn’t have all the additional federated info unless the remote server sent the required ActivityPub data. But there&amp;rsquo;s nothing stopping that from happening.&lt;/p>
&lt;p>And because things like stream state will be federated between Owncast instances, you could essentially mimic a Twitch-style “raid” because once your stream ends it’ll know what other streams are currently live, and can recommend your viewers to check them out.&lt;/p>
&lt;p>Cool, right?&lt;/p>
&lt;h3 id="powered-by-standards">
Powered by standards
&lt;a class="heading-link" href="#powered-by-standards">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>In theory any Fediverse service could send the correct activities to Owncast and share state to show up in this directory (as long as the Owncast instance has explicitly followed the remote account, of course). I hope this will expand some of the things we do with decentralized, federated data. I have a &lt;a href="https://github.com/gabek/fedidocs/pull/10">PR up&lt;/a> in the FediDevs repo to discuss Federated presence standardization that would be behind this feature.&lt;/p>
&lt;p>Can’t wait to build this stuff. &lt;a href="https://owncast.online/help">I hope some of you join me!&lt;/a>&lt;/p></description></item><item><title>Owncast v0.1.0 Retrospective - Frontend Web Rewrite</title><link>https://gabekangas.com/blog/2023/02/owncast-v0.1.0-retrospective-frontend-web-rewrite/</link><pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2023/02/owncast-v0.1.0-retrospective-frontend-web-rewrite/</guid><description>&lt;p>This post is a continuation of posts leading up to Owncast v0.1.0 that discusses some of the high level goals for the release. Read the first post about a &lt;a href="https://gabekangas.com/blog/2023/02/owncast-v0.1.0-retrospective-redesign/">Owncast redesign&lt;/a> for part 1.&lt;/p>
&lt;h2 id="hack-the-planet">
Hack the planet!
&lt;a class="heading-link" href="#hack-the-planet">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>One of the high level goals for Owncast since day one was hackibility. I wanted what was shipped to be a starting point for people looking to run their own custom live streams, not a locked in experience.&lt;/p>
&lt;p>I was determined to write the web frontend in a way that required no pre-processing, no bundling, no JavaScript compilers. Raw JavaScript, HTML and CSS would be shipped so making changes to these files would be as straightforward as opening the files in a text editor and making your changes.&lt;/p>
&lt;p>To pull this off it meant making a lot of very specific web technology choices, or maybe more specifically, a lack thereof. There could be no modern web development tooling, no bundling of source files, no TypeScript, no SASS, no CSS modules, no UI component libraries, no Webpack, no Babel. Just a bunch of raw web source.&lt;/p>
&lt;p>And it worked. My goal of giving people a bunch of plain text files they could edit was successful and I thought it was kind of cool. It traded a good developer experience for a better customization experience, but I felt that was a fair trade off.&lt;/p>
&lt;p>I thought all this would be a positive for contributors, too. There would be no development environment. You just download Owncast and you start making changes to the frontend files. That’s as minimal as you can get, and I thought people would enjoy that when looking to help the project.&lt;/p>
&lt;p>A nice middle ground was using &lt;a href="https://preactjs.com/">Preact&lt;/a> + &lt;a href="https://preactjs.com/guide/v10/getting-started/#alternatives-to-jsx">HTM&lt;/a>. It allowed building frontend components in &lt;em>almost&lt;/em> the exact same syntax as React, but without all the overhead of React or JSX transpiling requirements. I thought it was a pretty sweet solution that allowed people with familiarity with React to still jump right in and feel at home.&lt;/p>
&lt;h2 id="serious-downsides">
Serious downsides
&lt;a class="heading-link" href="#serious-downsides">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Even though all the pieces of the puzzle worked, it became clear of the downsides.&lt;/p>
&lt;h3 id="frontend-contributors-were-scared-off">
Frontend contributors were scared off
&lt;a class="heading-link" href="#frontend-contributors-were-scared-off">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>&lt;em>Almost&lt;/em> React is not React, and people were scared away from contributing on the frontend for pretty much the entirety of the project because Preact can look slightly different than React. People know what they know and like what they like, and me saying “anybody will be able to pick it up” didn’t make people feel comfortable enough to actually contribute.&lt;/p>
&lt;h3 id="everything-was-built-from-scratch">
Everything was built from scratch
&lt;a class="heading-link" href="#everything-was-built-from-scratch">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Because I was unable to take advantage of 3rd party UI components everything needed to be built from scratch. And as somebody who’s favorite part of software development isn’t deciding what a button’s hover state should look like, this really started to bother me. I wanted to build features, but every addition had a huge UI lift.&lt;/p>
&lt;p>An additional, substantial, downside, was the accessibility of all these home grown components wasn’t great and I was always being told how awful of a person I was because of it.&lt;/p>
&lt;h3 id="nobody-actually-took-advantage-of-it">
Nobody actually took advantage of it
&lt;a class="heading-link" href="#nobody-actually-took-advantage-of-it">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>While people would tweak a color or font here and there, my goals of allowing people to completely control their page never really appealed to people like I thought it would. It was infinitely hackable, but nobody cared to hack it.&lt;/p>
&lt;h2 id="a-change-in-direction">
A change in direction
&lt;a class="heading-link" href="#a-change-in-direction">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I started looking at all the features I wanted to build going into the future. Things like schedules, localization and recordings. But all I could think about was how I’d have to build, from scratch, calendars and scheduling components and reinvent the wheel to support translations. At this rate I’d never complete anything because I’d be spending all my time on UI and never complete features. There was nobody to help me, so I needed to figure out how to help myself make progress with the frontend. Changes had to be made.&lt;/p>
&lt;p>I figured if people weren’t taking advantage of the raw source, and I had to give up so much in order to continue to ship it, I would make the call to completely change this approach.&lt;/p>
&lt;p>I made sure to, multiple times, &lt;a href="https://owncast.online/news/20230201-preparing-for-v010/">warn people of this change&lt;/a>, and then I’d take a rather large step backwards. By completely rewriting the UI using a new tech stack it would allow a better development experience in exchange for no longer shipping those raw web source files that nobody cared about anyway.&lt;/p>
&lt;h3 id="a-new-stack">
A new stack
&lt;a class="heading-link" href="#a-new-stack">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://nextjs.org/">Nextjs&lt;/a>, &lt;a href="https://reactjs.org/">React&lt;/a>, &lt;a href="https://www.typescriptlang.org/">Typescript&lt;/a>, &lt;a href="https://github.com/css-modules/css-modules">CSS Modules&lt;/a>, &lt;a href="https://sass-lang.com/">Sass&lt;/a>, &lt;a href="https://storybook.js.org/">Storybook&lt;/a>. I almost immediately started enjoying the process of web development more when I had tooling that made it more tolerable. I was moving faster, I was taking advantage of other tools, and in every direction there were positives (except the part where the entire thing had to be rebuilt).&lt;/p>
&lt;h3 id="contributors-came">
Contributors came
&lt;a class="heading-link" href="#contributors-came">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>And it was almost overnight once Owncast stopped saying “Any web developer would feel at home with our stack” to explicitly saying “We use &lt;strong>React&lt;/strong>”, the contributors started showing up and successfully contributing.&lt;/p>
&lt;p>Really great people with insight, experience, and energy wanted to jump into the project and say “Hey, I know React. I know Typescript. I know Sass, let me help”. I can’t tell you how great that made me feel to finally get some help on the frontend after so long being frustrated with the situation.&lt;/p>
&lt;p>A &lt;strong>huge&lt;/strong> thank you to everyone who&amp;rsquo;s been involved with the work going into this release. There was so much to do and each person who jumped in to help made a world of difference.&lt;/p>
&lt;h3 id="progress">
Progress
&lt;a class="heading-link" href="#progress">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>All of a sudden this huge goal that I created of rebuilding the entire Owncast interface started getting chipped away. I’d look at the issues that were in progress and there were more than just my name attached to them.&lt;/p>
&lt;p>I started to see things paying off. Now the page loads faster because I was able to tree shake unused code, and code split things into specific bundles. I was able to experiment faster by using 3rd party components. The accessibility support was better because people who build UI components for a living are better at it than I am and I wasn’t reinventing the wheel at every turn.&lt;/p>
&lt;p>The project is able to use Storybook to build and test components now, allowing contributors to help the project without even running a test instance of Owncast. They can load up Storybook and make changes. These changes can be validated by build tooling and UI snapshot tests can highlight the changes that are made.&lt;/p>
&lt;p>And I can get a level of structure and strictness that JavaScript alone doesn’t afford by using Typescript. I like types. Writing JavaScript alone feels like I’m wiring up a bomb with no instructions on where the wires go.&lt;/p>
&lt;p>None of this was possible before. At least not in a straightforward way.&lt;/p>
&lt;h2 id="what-did-i-learn">
What did I learn?
&lt;a class="heading-link" href="#what-did-i-learn">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I guess you could call the initial goals of infinite hackibility to be a sort of a premature optimization. I wanted people to have the ability to do something that I didn’t know if they wanted or not. And sometimes that’s ok when you don’t have to invest a lot, or give up so much to accomplish it, but in this case it wasn’t a fair trade off.&lt;/p>
&lt;p>And while many people don’t agree, this is a concrete example of technology choices mattering. React is the biggest game in town, so using React appeals to more people. And even though a software developer can probably successfully work with any tech stack they try, not all of them want to try. No amount of me saying “It’ll be fine, just jump in” will convince them otherwise.&lt;/p>
&lt;h2 id="in-conclusion">
In conclusion
&lt;a class="heading-link" href="#in-conclusion">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Do I think the React+TypeScript stack is so wonderful? Not really. In fact, it has a &lt;strong>ton&lt;/strong> of downsides. But did changing to it have significant upsides? &lt;strong>Absolutely&lt;/strong>.&lt;/p>
&lt;p>The old saying is pick the technology that can stay out of the way and lets you focus on only the parts that make you distinct. Moving to a React stack has really done this for me, the project, and the contributors.&lt;/p>
&lt;p>I now have an entire ecosystem of tooling that I can plug right in to make my life easier. Issues get caught at build time with TypeScript. UI issues get caught in visual snapshot tests. Things are more accessible because I can bring in components that were improved over years. I could go on and on.&lt;/p>
&lt;h2 id="oh-yeah-and-the-project-is-open-for-contributions">
Oh yeah, and the project is open for contributions
&lt;a class="heading-link" href="#oh-yeah-and-the-project-is-open-for-contributions">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>And lastly, I&amp;rsquo;d be missing an opportunity if I didn&amp;rsquo;t call out that we&amp;rsquo;re always looking for contributors to help with the project both on our new frontend, and the Go backend. Take a look at the &lt;a href="https://owncast.online/help">Contributing Guide&lt;/a> and jump in!&lt;/p></description></item><item><title>Owncast v0.1.0 Retrospective - Redesign</title><link>https://gabekangas.com/blog/2023/02/owncast-v0.1.0-retrospective-redesign/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2023/02/owncast-v0.1.0-retrospective-redesign/</guid><description>&lt;p>With Owncast v0.1.0 starting a bug fixing and a super early testing phase now, I thought I’d write some blog posts about what it’s been like to get this far in this rather large release. A lot of projects don’t go into depth about how the sausage is made, and Owncast is no exception. I’m generally an open book if you ask or are involved with contributing to the project, but I usually don’t go out of my way to share every little thing with people who aren’t involved.&lt;/p>
&lt;p>For this first post I thought I’d start with a goal that I was very passionate about for this release, a redesign. And while I&amp;rsquo;m trying to be both respectful and honest it might seem like I&amp;rsquo;m being too much of one or another. Keep in mind that I appreciate every person who has been involved with Owncast in any capacity, and I respect their thoughts and any amount of energy they&amp;rsquo;ve put into the project.&lt;/p>
&lt;p>Going forward I promise other topics will be more positive, and I&amp;rsquo;ll be writing about the other goals for this release in future posts.&lt;/p>
&lt;h2 id="history-of-a-redesign">
History of a redesign
&lt;a class="heading-link" href="#history-of-a-redesign">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I heard from so many people for such a long time that they liked Owncast but it &lt;em>&amp;ldquo;needed polish&amp;rdquo;&lt;/em> or &lt;em>&amp;ldquo;it looked bad&amp;rdquo;&lt;/em> or &lt;em>&amp;ldquo;the design needs help&amp;rdquo;&lt;/em>. And while there were never constructive action items, suggestions, or offers to help, I knew they were right and I looked forward to the opportunity to improve it.&lt;/p>
&lt;p>Like a lot of open source projects Owncast originally started small, with few features. As the project grew more things got added and the UI requirements became more complex. Few of the components or design elements shared styles, type, or colors because they were just slapped on as needs arose. &lt;strong>I felt now was the time to take a step back and start fresh with the Owncast web application frontend.&lt;/strong> I wanted to design from scratch and then build the UI from scratch. After that we can get back to building new features, hopefully with a design and architecture that serves the project well for years to come.&lt;/p>
&lt;p>&lt;strong>I took this redesign seriously and I wanted to do it right.&lt;/strong> Since visual design isn&amp;rsquo;t one of my core strengths I decided to find somebody who could work with the project.&lt;/p>
&lt;h2 id="finding-design-help">
Finding design help
&lt;a class="heading-link" href="#finding-design-help">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I&amp;rsquo;ve never been able to catch the attention of designers to help with Owncast. And given my lack of design skills I feel quite vulnerable that there’s a skill I don&amp;rsquo;t have, and not sure how to acquire, leading to being completely dependent on somebody other than myself. When it comes to Owncast I generally haven’t had success when relying on others, but without a designer in-house I knew to accomplish this big project I&amp;rsquo;d have to find a design agency.&lt;/p>
&lt;p>It started as you’d expect, with me sharing everything I could about Owncast with the agency. It’s important that at this “product” level that they are 100% informed about what it is you’re building, why you’re building it, and who you’re building it for. I wrote documents about use cases and the different types of users. I provided lists of requirements and lists of things I didn’t want. I gave examples of work that I enjoyed and examples of things I didn’t like.&lt;/p>
&lt;p>The reaction from an outsider to Owncast wasn&amp;rsquo;t unexpected. &lt;em>“Owncast is kind of like Twitch? &lt;strong>Let’s make it look like Twitch!&lt;/strong>”&lt;/em> And that’s a valid starting point, it’s not uncommon to use existing products as a way to start. But unfortunately &lt;strong>I was unable to force progress from there&lt;/strong>. The more I pushed to not look like Twitch the more they straight up copied Twitch’s colors, layout, iconography and more. I’d say &lt;em>“This wouldn’t work for a church”&lt;/em> or &lt;em>“A school would never want a 100% black page with swords”&lt;/em>. Months of back and forth took place without much progress, and with other large topics such as mobile layouts, modals and user flows still up in the air &lt;strong>I realized I knew this project wouldn&amp;rsquo;t be completed with this particular partnership&lt;/strong>.&lt;/p>
&lt;p>I was disappointed, but I wasn’t ready to give up. This is when I, again, started hitting the Fediverse, forums, Linkedin, and other social platforms looking for somebody who could help with a new design of Owncast. I told everyone to share this request with their friends and colleagues. I needed help.&lt;/p>
&lt;p>Lucky for me some people responded, and each time they did I was immensely excited. A person who wants to help, it always makes me &lt;strong>so happy&lt;/strong>.&lt;/p>
&lt;h2 id="trying-to-accomplish-a-long-term-project-with-short-term-contributions">
Trying to accomplish a long-term project with short-term contributions
&lt;a class="heading-link" href="#trying-to-accomplish-a-long-term-project-with-short-term-contributions">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I&amp;rsquo;m thankful for each person who has ever showed up with hopes to help with Owncast, so I don&amp;rsquo;t want to come off as harsh or ungreatful. But I was unprepared for the challenges of trying to manage a long-term project such as the entire look and feel of the web application when people were unable to commit to seeing it through.&lt;/p>
&lt;p>A project such as a redesign requires a long term commitment. It’s not like code contributions where you can jump in quick, fix a typo, and then never show up again. So what would happen is somebody would show interest, I&amp;rsquo;d get them up to speed on our requirements, they&amp;rsquo;d spend time working out what tools they wanted to use, start working on something, and then no longer be able to contribute for one reason or another. So I’d ask around again, and somebody new would graciously jump in but with the caveat that they &lt;strong>start the design over from scratch&lt;/strong> because they didn’t like what the previous person did. A couple times I agreed out of desperation for help, but each time they’d disappear and the cycle would restart. New person, new tools, new design, no progress. &lt;strong>New person, new tools, new design, no progress&lt;/strong>.&lt;/p>
&lt;p>It&amp;rsquo;s not uncommon to want to work on the sexy stuff, I totally get that. While I had a list of &lt;em>&amp;ldquo;Needs Design&amp;rdquo;&lt;/em> tasks like authentication modals and error states it was primarily things like chat that people wanted to start over on each time, leading to a long list of things that couldn&amp;rsquo;t get any attention.&lt;/p>
&lt;p>Eventually I had to make the call that there would be &lt;strong>no more complete restarts&lt;/strong> of design work because at some point I needed progress to be made. So going forward each person would &lt;strong>build upon the work of the person before them&lt;/strong>. And as expected people had no interest in working on error states and menus so &lt;strong>all design interest from anybody completely went away&lt;/strong>.&lt;/p>
&lt;p>With over half of a year passed, with nothing more than little bits and pieces of incomplete or unusable design scattered here and there we simply took the old layout of Owncast and started rebuilding it. No new colors, no new layout. People will see this rebuild and think &amp;ldquo;What took so long? It looks the same.&amp;rdquo;&lt;/p>
&lt;p>After all of this time, effort, and money, the redesign was a failure.&lt;/p>
&lt;h2 id="what-could-have-been-done-differently">
What could have been done differently?
&lt;a class="heading-link" href="#what-could-have-been-done-differently">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>As the project maintainer this failure was completely my fault. I was operating purely on ambition, hoping the complimentary design skill set could be found one way or another and we&amp;rsquo;d end up building something that everyone was super proud of.&lt;/p>
&lt;p>Maybe it was foolish to take upon a project where I didn’t have that skill set required to accomplish it myself. Maybe I need to double down on the approach that if I can’t do it myself, then Owncast shouldn’t try it. But that would be so sad. &lt;strong>I want to believe that I can work with others to accomplish a goal that’s bigger than something I could do on my own.&lt;/strong>&lt;/p>
&lt;p>I think design and visually creative efforts will always be a challenge with Owncast and it&amp;rsquo;s not something I&amp;rsquo;ll be able to fix overnight. But I do hope that if I keep pushing hard enough I can appeal to people who care about visual design and want to see their efforts and vision reflected in the project.&lt;/p>
&lt;p>But just in case I did buy a couple books on design that I&amp;rsquo;m making my way through.&lt;/p></description></item><item><title>Common sense doesn't scale</title><link>https://gabekangas.com/blog/2022/12/common-sense-doesnt-scale/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2022/12/common-sense-doesnt-scale/</guid><description>&lt;p>Imagine you were hired as a babysitter by some parents for their child. They are usually pretty casual about things, but they mentioned the kid has to go to bed at 8pm.&lt;/p>
&lt;p>8pm comes around and the movie the kid is watching has 5 minutes left. And while I&amp;rsquo;ve never been a babysitter, and I know nothing about children, I would like to think that I, and probably most people, would let the kid watch that 5 minutes. Common sense says if they are a good kid who isn&amp;rsquo;t actively trying to break the rules it&amp;rsquo;s probably fine and doesn&amp;rsquo;t hurt anybody.&lt;/p>
&lt;p>Now imagine you were hired as a babysitter by hundreds of parents, for thousands of children at once.&lt;/p>
&lt;p>Some kids are actively trying to break the rules, some are going to bed right at 8, some are trying to start an entire new movie, and then there&amp;rsquo;s that one who has 5 minutes left. In this example you couldn&amp;rsquo;t possibly use common sense to figure out what to do for each kid. You would probably just plug all the TVs into a power strip and turn them all off at 8pm sharp. However, you kind of screwed over that one kid who just wanted to finish their movie. They weren&amp;rsquo;t trying to hurt anybody or actively cause problems, but got shut down anyway.&lt;/p>
&lt;p>As that babysitter your job is to try to make sure the kids are taken care of, that you get paid, and to make sure you get hired again in the future. You&amp;rsquo;re not a bad person, and you&amp;rsquo;re not trying to make the lives of these kids worse. But in this situation there is no way to scale your common sense, empathy, or humanity to do a &lt;em>great&lt;/em> job. You can only do your best to do a &lt;em>good&lt;/em> job at that scale.&lt;/p>
&lt;p>This is Big Tech in a nutshell. Each Big Tech company has been tasked to babysit an immense number of people while rights holders, governments, advertisers and legal entities watch over them with their own sets of expectations.&lt;/p>
&lt;p>If you give any tech company the benefit of the doubt (difficult, I know), each began by trying to treat their users well, as nobody (generally) starts a company for the sole purpose of screwing over those who want to utilize it. But quickly something becomes more important than people: to not get shut down by entities more powerful than they are.&lt;/p>
&lt;p>Even the most loved Big Tech enterprises will never, ever be able to treat its users well at scale. No redesign of their copyright policies, no new terms of service, no new algorithm and no new owner will ever be able to change the fact that when you get that big you can no longer treat your users as individuals and you will actively hurt many of them. Once you get to a certain size working with your users becomes a data problem, not a people problem. And data problems cannot be solved with common sense, nuance, or empathy.&lt;/p>
&lt;p>Scale is our enemy. Be it open source or closed source. For-profit or not. As long as single organizations have to impose some interpretation of endless rules on that many people everything falls apart. The only solution is smaller services, standalone organizations, self-hosting, and decentralized networks allowing for it all.&lt;/p>
&lt;p>If you are taking advantage of any service that you see as &amp;ldquo;big&amp;rdquo; it&amp;rsquo;s only a matter of time before things go wrong. No service should have that many users to try to manage and no organization should have that much power to try and wield. Find small versions of things. Build small versions of things. Increase the diversity of opinions and perspectives on how rules should be interpreted. Big Tech isn&amp;rsquo;t there for you to improve your life. You&amp;rsquo;re a liability just as much as you are an asset. They will shut you down even if it&amp;rsquo;s not fair, because they have to.&lt;/p></description></item><item><title>Decentralized discovery</title><link>https://gabekangas.com/blog/2022/08/decentralized-discovery/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2022/08/decentralized-discovery/</guid><description>&lt;p>Often the first thing brought up when discussing decentralized content is the difficulty of discovery. Big Tech has all these data points combining the content on their platform with all the consumers so they can make educated guesses to route people to content that benefit the platform, data brokers, advertisers, governments, and lastly somewhere down the line the consumers. How can those who want to opt out of those networks compete in this game? I argue that we don&amp;rsquo;t. &lt;strong>We play a different game.&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>Below are some broad topics I want to discuss around discovery. It&amp;rsquo;s not about any specific project or technology, it&amp;rsquo;s just my thoughts. However, before I go further I want to make something unequivocally clear. I want everyone to internalize this deep within their soul.&lt;/p>
&lt;div style='font-size: 4rem; text-align: center; line-height: 1.1'>The internet wants to be decentralized.&lt;/div>
&lt;p>It&amp;rsquo;s the default. &lt;strong>We literally have to do nothing to have a decentralized internet&lt;/strong>. Every service a person brings online is a new entry in this beautiful network that is connected by standards and available without gatekeepers. Every new web site adds to the grand tapestry that is the World Wide Web, sharing knowledge, content and experiences. Every new XMPP server allows a community to communicate with each other, and to the greater internet. Every new Fediverse node grows an interconnected social network with different views, rules, communities and content.&lt;/p>
&lt;p>On the flip side, &lt;strong>it takes an unbelievable amount of money, personnel and power to build a locked-in empire&lt;/strong>. Yet here we are, surrounded by locked-in empires.&lt;/p>
&lt;p>We&amp;rsquo;ve resorted to thinking discovery is an algorithm telling us what to consume, or a protocol feeding us the next &lt;em>something&lt;/em>. &lt;strong>But do you like this way of consuming?&lt;/strong> Is it even accurate? Do you want more machines feeding you content, or are we just used to it?&lt;/p>
&lt;p>To give my opinions some credence let&amp;rsquo;s quickly refer to a creator who uses a Big Tech platform for his livelihood. The &lt;a href="https://www.youtube.com/c/Nostalgianerd">Nostalgia Nerd&lt;/a> is a YouTuber with about half a million subscribers. He recently shared how his content isn&amp;rsquo;t getting to the people who care about it, and voiced his frustrations about content from smaller content creators not being able to reach those who would enjoy it.&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wK2LjQ7voN8?start=508" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;p>So he made some requests:&lt;/p>
&lt;ol>
&lt;li>Don&amp;rsquo;t rely on the algorithm. Proactively visit content you want to watch and follow them elsewhere to keep up to date.&lt;/li>
&lt;li>Go visit the 10 creators that he recommends.&lt;/li>
&lt;/ol>
&lt;p>And there lies the specifics of decentralized discovery.&lt;/p>
&lt;hr>
&lt;h2 id="topics-i-want-to-discuss">
Topics I want to discuss
&lt;a class="heading-link" href="#topics-i-want-to-discuss">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#curation">Curation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#so-no-algorithms-or-automated-discovery-then">Algorithms&lt;/a>&lt;/li>
&lt;li>&lt;a href="#interfaces">Interfaces&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ive-failed-at-building-decentralized-discovery-in-the-past">My previous attempts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#final-thoughts">And some final thoughts&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="curation">
Curation
&lt;a class="heading-link" href="#curation">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>What&amp;rsquo;s a proven way to discover content in a decentralized way? &lt;strong>Have people tell you about it.&lt;/strong>&lt;/p>
&lt;p>In the above example, purely out of frustration, The Nostalgia Nerd briefly pivoted from being a content creator who relied on the algorithm to a curator working around the algorithm.&lt;/p>
&lt;p>We&amp;rsquo;re natural curators. You tell your friends your favorite song, your favorite movie, your favorite writers. For others it&amp;rsquo;s far more formal. You have a newsletter with suggested links and topics, or a playlist with your favorite songs. Some people even make a living curating topics, news, recommendations or entertainment. This has been around forever, and as much as we pretend we&amp;rsquo;ve given ourselves up to the machine, human-powered curation is bigger than ever.&lt;/p>
&lt;h3 id="curation-examples">
Curation Examples
&lt;a class="heading-link" href="#curation-examples">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>Letterboxd&lt;/strong>&lt;/p>
&lt;p>I personally use &lt;a href="https://letterboxd.com/gabekangas/">Letterboxd&lt;/a> to discover movies and read reviews from everyday people. I don&amp;rsquo;t use an algorithm there, I instead browse through the &amp;ldquo;Best 50 dystopian sci-fi&amp;rdquo; list and pick one I haven&amp;rsquo;t seen yet.&lt;/p>
&lt;p>&lt;strong>Twitch Raids&lt;/strong>&lt;/p>
&lt;p>On Twitch you can &amp;ldquo;Raid&amp;rdquo; another live stream by sending all your viewers over to them. The streamer picks one live stream that they want their viewers to experience.&lt;/p>
&lt;p>&lt;strong>Content Journalism&lt;/strong>&lt;/p>
&lt;p>Blogs, newsletters, videos. For example, I always look forward to &lt;a href="https://www.snoozebutton.com/">Marc Ruxin&amp;rsquo;s end of year movie list&lt;/a> to see what films he&amp;rsquo;s suggested because I&amp;rsquo;ve always found his recommendations to be spot on with my tastes.&lt;/p>
&lt;p>&lt;strong>Old Skewl Stuff&lt;/strong>&lt;/p>
&lt;p>Remember Blogrolls? Webrings? Or pages on your site that listed &amp;ldquo;Friends&amp;rdquo;? I&amp;rsquo;m not saying we need to go back to those days, but those things, though they seem quaint now, served a real purpose. Maybe we can learn something from the past.&lt;/p>
&lt;p>&lt;strong>Social Media Accounts&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://fedinews.com/2022/02/feditips-a-great-way-to-discover-new-content/">FediVideo&lt;/a> curates video content on the Fediverse that people should check out. They do a fantastic job in helping people discover new content from across the Fediverse on different sites, servers and platforms.&lt;/p>
&lt;p>&lt;strong>Playlisting&lt;/strong>&lt;/p>
&lt;p>While I&amp;rsquo;m not going to tell you Spotify is a bastion of openness, it does lead to a modern example of curation. Spotify playlisting has become an industry. And while I wish they weren&amp;rsquo;t so &amp;ldquo;pay to play&amp;rdquo;, that&amp;rsquo;s kind of the beauty of it. There&amp;rsquo;s a place for commercial playlisting in the music industry, that&amp;rsquo;s nothing new. But right next to that commercial playlist is another one run by some indie music fan who wants to share their current favorites. This means you have options. You can look at both. You can compare and contrast.&lt;/p>
&lt;h3 id="bonuses-of-curation">
Bonuses of Curation
&lt;a class="heading-link" href="#bonuses-of-curation">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Different curators means different opinions. If you don&amp;rsquo;t think your viewpoint is represented, or an algorithm is biased, then you can take part in people&amp;rsquo;s discovery process using your thoughts and feelings instead.&lt;/li>
&lt;li>The content doesn&amp;rsquo;t have to be limited by technology. Build a site highlighting awesome photographers. Some are on Pixelfed, some use 500px, some on Facebook. Compare that to Instagram where they can only recommend Instagram accounts.&lt;/li>
&lt;li>You can start super small without any new tech required. Create a wordpress blog, open a Fediverse account, or just start emailing your friends.&lt;/li>
&lt;/ul>
&lt;h2 id="so-no-algorithms-or-automated-discovery-then">
So no algorithms or automated discovery then?
&lt;a class="heading-link" href="#so-no-algorithms-or-automated-discovery-then">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>While a part of me wants to go all Dune and &lt;a href="https://dune.fandom.com/wiki/Butlerian_Jihad">ban the thinking machines&lt;/a>, we all benefit from algorithms. However, as it stands there&amp;rsquo;s only one user-facing recommendation algorithm per Big Tech platform and it&amp;rsquo;s built, owned and operated by the same people who have different motives than the consumers and creators of the content. So it&amp;rsquo;s not that we shouldn&amp;rsquo;t trust &lt;em>all&lt;/em> algorithms, but it&amp;rsquo;s true that we can&amp;rsquo;t trust &lt;em>those&lt;/em> algorithms.&lt;/p>
&lt;p>So maybe there&amp;rsquo;s a place for us to build our own?&lt;/p>
&lt;h3 id="algorithms-require-lots-of-accurate-data">
Algorithms require lots of (accurate) data
&lt;a class="heading-link" href="#algorithms-require-lots-of-accurate-data">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Having different types of algorithms built by different people has been a dream for a long time, but it&amp;rsquo;s been impossible with our data being locked up in the halls of Big Tech services. The good news is if we decentralize our services, then we have the option to open up our data.&lt;/p>
&lt;p>However, even if we did open up all of our respective data, it gets difficult. Say we wanted to replicate the YouTube-style recommendation algorithm but using open data across multiple services. At the very least you&amp;rsquo;d be wanting to use view count to determine how &amp;ldquo;popular&amp;rdquo; a video is so you can recommend it to others. But with the nature of open data, how could you trust that count? Why wouldn&amp;rsquo;t somebody want to fake their view count in order to get bumped up in the algorithm?&lt;/p>
&lt;p>If we&amp;rsquo;re talking decentralized and open, then you can&amp;rsquo;t trust it, and there&amp;rsquo;s no way around that. No signing, no encryption, no authentication can build trust for completely open data when people &lt;strong>benefit from faking it&lt;/strong>.&lt;/p>
&lt;p>And while this has always been true, sometimes it doesn&amp;rsquo;t matter so much. Anybody could build a Fediverse node that lies about the number of followers they have. Sure, that&amp;rsquo;d be lame, but it wouldn&amp;rsquo;t really hurt anybody. However, if you use that number for active decision making, such as suggesting accounts to follow, then &lt;strong>it would be a big problem.&lt;/strong>&lt;/p>
&lt;h3 id="but-some-algorithms-could-work">
But some algorithms could work
&lt;a class="heading-link" href="#but-some-algorithms-could-work">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Take for example a decentralized discovery platform you use every day: The search engine. You put in some key words, and some algorithm, powered by completely open data, gives you suggestions that you can click on and navigate to.&lt;/p>
&lt;p>Clearly the biggest search engines are not positive examples when it comes to the exact implementations. But high level, this is how it&amp;rsquo;s supposed to work. And it could work for us too, with enough data and demand.&lt;/p>
&lt;h3 id="interfaces">
Interfaces
&lt;a class="heading-link" href="#interfaces">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Different types of content benefit from different interfaces. I&amp;rsquo;ve always been a fan of leveraging standards to allow people to opt into the interface that works best for them. Podcasts, for example, can be consumed with any Podcasting application because of RSS. You can pick and choose what feature set, platform and price works best for you. You also can change interfaces and applications over time, or use different ones in different scenarios.&lt;/p>
&lt;p>Using video as an example, let&amp;rsquo;s check out a couple ways content have been surfaced for discovery.&lt;/p>
&lt;p>&lt;a href="https://yarmo.eu/">Yarmo&lt;/a> built his own interface for surfacing Owncast streams he likes and called it &lt;a href="https://ownroll.yarmo.live/">&lt;em>Ownroll&lt;/em>&lt;/a>. This interface makes a lot of sense when talking about video streams.&lt;/p>
&lt;img src="https://gabekangas.com/blog/images/yarmo-ownroll.png"/>
&lt;p>PeerTube has a &lt;a href="https://search.joinpeertube.org/">search engine called Sepia&lt;/a> for discovering videos.&lt;/p>
&lt;p>Owncast has a &lt;a href="https://directory.owncast.online">directory&lt;/a> for streamers who choose to be public.&lt;/p>
&lt;p>Personally one way I enjoy discovering Owncast streams is I open an application on my AppleTV and it shows me a bunch of streams that are currently live. I navigate to one, and select it, and I watch the stream. This is because &lt;a href="https://owncast.online/docs/watching-on-tvs/#browsing-the-owncast-directory-on-your-tv">the Owncast directory offers up a standards-compliant way to access this data&lt;/a>.&lt;/p>
&lt;img src="https://gabekangas.com/blog/images/owncast-streams-appletv.png"/>
&lt;p>It&amp;rsquo;s very casual and I can lean back and look at my TV and &amp;ldquo;see what&amp;rsquo;s on&amp;rdquo;, just like people say about cable TV. This doesn&amp;rsquo;t &lt;em>feel&lt;/em> like decentralized content discovery and consumption. It just feels like content. &lt;strong>Just like going into the YouTube app, or the Netflix app&lt;/strong>.&lt;/p>
&lt;h2 id="ive-failed-at-building-decentralized-discovery-in-the-past">
I&amp;rsquo;ve failed at building decentralized discovery in the past
&lt;a class="heading-link" href="#ive-failed-at-building-decentralized-discovery-in-the-past">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>A handful of years ago I built an Internet Radio discovery platform called &lt;a href="https://gabekangas.com/blog/2017/04/introducing-longtail-music/">Longtail Music&lt;/a>. &lt;a href="https://gabekangas.com/blog/2019/12/goodbye-longtail-music/">It failed&lt;/a>.&lt;/p>
&lt;p>Internet radio is a fantastic example of a decentralized service. While there are some networks of stations, in general most stations are owned and operated by an individual who is doing it for the love of it. It&amp;rsquo;s also based on a standard protocol, so people can consume the audio in so many different ways. &lt;strong>It&amp;rsquo;s really great.&lt;/strong>&lt;/p>
&lt;p>I built something that would index all the music that these stations were playing, and then utilize potential listeners&amp;rsquo; music tastes either manually, or through streaming services, to determine stations they might like. Pretty straightforward, and I felt like everyone wins. The station owners get new listeners, and the listeners get introduced to a new, free, and very human way to consume music.&lt;/p>
&lt;p>I reached out to stations that I thought were doing a great job and said I was building a modern place to highlight quality internet radio and asked if they wanted to be featured. &lt;strong>Most said &amp;ldquo;no&amp;rdquo;&lt;/strong>. The reasons were mostly that they incorrectly thought I was trying to sell them something, and I was unable to convince them otherwise. Others thought I was a scammer trying to &amp;ldquo;steal&amp;rdquo; their content, or they thought linking to their content from other pages would &amp;ldquo;steal their listeners&amp;rdquo;. Mostly it was a general mindset that these people have been independently creating internet radio content for over a decade and assumed I was trying to screw them over somehow because nobody does anything for free.&lt;/p>
&lt;p>This mindset was &lt;em>extremely&lt;/em> common from people who owned internet radio stations. &lt;strong>The independence was fierce&lt;/strong>. I eventually found this to be an unwinnable battle. If you&amp;rsquo;re trying to do something for somebody, in this case trying to find listeners for an internet radio station, but they don&amp;rsquo;t want you involved, then ultimately I built something that just wasn&amp;rsquo;t wanted and gave up.&lt;/p>
&lt;h3 id="compare-this-to-video-streaming">
Compare this to video streaming
&lt;a class="heading-link" href="#compare-this-to-video-streaming">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Internet Radio, admittedly, is from a different era. And I say this in a positive way. It&amp;rsquo;s decentralized, independent, free, open, and wonderful.&lt;/p>
&lt;p>Compare this to live video streaming, for example. Here the default isn&amp;rsquo;t free, open, independent, decentralized or wonderful. It&amp;rsquo;s Twitch and YouTube and Big Tech and walled gardens. And the name of the game for all of these platforms is to get as many viewers as possible by any means possible. Some people who have opted to use something like Owncast to stream independently certainly don&amp;rsquo;t seem to have that overly aggressive mindset with regards to viewers, but I think most streamers would agree that it would be nice to have viewers and would love you to share their stream to your friends, or your site, or whatever.&lt;/p>
&lt;p>So it&amp;rsquo;s different. I&amp;rsquo;m not going to use my experience with Longtail Music to say &lt;em>&amp;ldquo;creators don&amp;rsquo;t want to be shared with others&amp;rdquo;&lt;/em>, because I don&amp;rsquo;t believe that to be true.&lt;/p>
&lt;h2 id="final-thoughts">
Final Thoughts
&lt;a class="heading-link" href="#final-thoughts">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I think we&amp;rsquo;re spoiled by algorithms, but it will be hard to trust completely open data in order to build our own. I personally believe we could use a human touch, but we don&amp;rsquo;t have enough people wanting to be curators to fill in the gaps. Maybe the tides will change and we&amp;rsquo;ll stop relying on centralized discovery so much and there will be a variety of options from different people.&lt;/p>
&lt;p>I did a lot of writing and I didn&amp;rsquo;t give a single, specific solution, and for that I apologize. If you were hoping for a protocol, a piece of tech, or a single standard that we can build upon you&amp;rsquo;re pretty disappointed. So to make up for that I&amp;rsquo;ll throw you my pie in the sky idea that I&amp;rsquo;d think about building if I wasn&amp;rsquo;t working on Owncast. Keep in mind this is just high level brainstorming.&lt;/p>
&lt;ul>
&lt;li>New ActivityPub powered project that accepts activities from all the decentralized services that speak ActivityPub.&lt;/li>
&lt;li>Unlike projects that are equally about creation &lt;em>and&lt;/em> consumption, this would be &lt;strong>consumption-only&lt;/strong>.&lt;/li>
&lt;li>It would follow ActivityPub actors from any service and accept activities from them.&lt;/li>
&lt;li>Things like: stream went live, video was published, blog post was posted, song was uploaded, event was scheduled, etc.&lt;/li>
&lt;li>Admins can create curated lists and sections and override the inevitable faked data.&lt;/li>
&lt;li>I imagine it kind of like a mixture between search results, old-school Yahoo (when it was a directory), and Tumblr, but without a timeline. Just a directory of stuff broken down by types and metadata.&lt;/li>
&lt;li>Just enough rendering of content to know what the content is and assist in discovery.&lt;/li>
&lt;li>Unlike software that do what they can to keep you within your &amp;ldquo;home server&amp;rdquo;, this would encourage you to go to the source of the content so you can discover more of it. People deserve the &amp;ldquo;click&amp;rdquo; to their actual server, not just embeds.&lt;/li>
&lt;li>It&amp;rsquo;s not meant to be the place you go to consume all the content you follow. So no home timelines, no algorithmic filtering.&lt;/li>
&lt;li>This project would have no direct affiliation with other projects as to have equal focus handling content from all types of services and encourage standards, no preferential treatment. Content server agnostic.&lt;/li>
&lt;/ul>
&lt;p>So there you go, an idea. Take it and run with it and I&amp;rsquo;ll make sure Owncast sends you all the data you need via ActivityPub.&lt;/p>
&lt;p>But clearly we need more people involved for any of this to matter. It can&amp;rsquo;t be &amp;ldquo;Owncast builds an Owncast directory, PeerTube builds a PeerTube search engine, PodcastIndex builds a Podcast search engine ok good enough&amp;rdquo;. From my perspective the Owncast directory is there to show examples of Owncast streams, not as &lt;em>the&lt;/em> solution for live stream discovery.&lt;/p>
&lt;p>The good news is believe it or not we&amp;rsquo;re in the best possible scenario. We have a diverse collection of people, technologies and ideas at our fingertips. Big Tech only has what it has: a small-minded bubble that doesn&amp;rsquo;t have people in its best interests. We can do better because we can do anything when we build it ourselves.&lt;/p></description></item><item><title>Ship software, not code</title><link>https://gabekangas.com/blog/2022/06/ship-software-not-code/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2022/06/ship-software-not-code/</guid><description>&lt;p>&lt;strong>Note from the editor. That&amp;rsquo;s me, Gabe. I&amp;rsquo;m the editor.&lt;/strong> I&amp;rsquo;ve had this blog post in draft status for a while, originally creating the outline for a possible conference talk. I didn&amp;rsquo;t write it to
be negative about any particular software, language, or approach. However, in the past day I&amp;rsquo;ve done some software installing and found myself experiencing much of what I wrote below. However, it&amp;rsquo;s still only a coincidence and I didn&amp;rsquo;t write this to be on the offensive against any one project.&lt;/p>
&lt;hr>
&lt;h2 id="software-and-code">
Software and code
&lt;a class="heading-link" href="#software-and-code">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Same thing, right?&lt;/strong> Well, no. You write code, and then you turn it into a software product people can run. I want to discuss how they are very different things, and the differences make a significant impact in how we approach empowering users with new tools and technologies. Especially in a time where giving people legitimate alternatives to centralized, big tech services is more important than ever.&lt;/p>
&lt;h2 id="so-what-is-software">
So what is software?
&lt;a class="heading-link" href="#so-what-is-software">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Take a moment to visualize what software is. &lt;strong>What does it look like?&lt;/strong> Some may think that&amp;rsquo;s a stupid question to ask about something so abstract, but it’s not at all abstract to me. When you say “software” this is what comes to mind.&lt;/p>
&lt;center>
&lt;a href="https://gabekangas.com/blog/images/shelf-of-software.jpg">
&lt;img src="https://gabekangas.com/blog/images/shelf-of-software.jpg" width="50%">
&lt;/a>
&lt;/center>
&lt;p>I think about walking into any big box store in the late 90s/early 2000s and going to their electronics department to see things like Microsoft Word, Doom, Print Shop, or Lotus 123 on the shelf. You could grab a box, bring it home, put it in your computer, and off you go. You were killing monsters, spreadsheeting, or printing out a banner before you knew it.&lt;/p>
&lt;p>What does this have to do with the topic of this post? Let&amp;rsquo;s start by picking a box of software off that shelf and ask yourself:&lt;/p>
&lt;ol>
&lt;li>What programming language was the software written in?&lt;/li>
&lt;li>What tools were required to build it?&lt;/li>
&lt;li>How were the dependencies managed in the development of this software?&lt;/li>
&lt;li>How is data persistence handled?&lt;/li>
&lt;/ol>
&lt;p>Let me make this easy for you, the answer for all of the above is &lt;strong>“who cares?”&lt;/strong>.&lt;/p>
&lt;h3 id="what-about-modern-software">
What about modern software?
&lt;a class="heading-link" href="#what-about-modern-software">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>Let’s ask those same questions for a modern piece of commercial software.&lt;/strong> While it&amp;rsquo;s not as common these days to walk into a store and bring a box home, you still buy it from a different kind of store and install it on your device.&lt;/p>
&lt;center>
&lt;a href=https://gabekangas.com/blog/images/android-productivity-apps.png">
&lt;img src="https://gabekangas.com/blog/images/android-productivity-apps.png" width="50%">
&lt;/a>
&lt;/center>
&lt;p>The answers to the questions are the same. &lt;strong>Nobody looking to run this software knows or cares how the software was built.&lt;/strong>&lt;/p>
&lt;p>Let’s look at a third example. This time some non-commercial, likely open source software. Say you wanted to host a little photo gallery to share pictures of your vacation with your friends. While it’s not boxed software, and it’s not something from a centralized App Store, it’s still fair to assume that we can just download it and run it. It’s just software, after all.&lt;/p>
&lt;center>
&lt;a href="https://gabekangas.com/blog/images/install-instructions.png">
&lt;img src="https://gabekangas.com/blog/images/install-instructions.png" width="50%">
&lt;/a>
&lt;/center>
&lt;p>Obviously something is different here. You&amp;rsquo;re being given code. And because of this not only do you know the answers to the original above questions, &lt;strong>you have to know the answers in order to begin the process of running anything.&lt;/strong>&lt;/p>
&lt;h2 id="obvious-disclaimer">
Obvious disclaimer
&lt;a class="heading-link" href="#obvious-disclaimer">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>While I don&amp;rsquo;t feel like I&amp;rsquo;m overly exaggerating in this post, I do want to make it clear that I don&amp;rsquo;t think &lt;em>everything&lt;/em> is as easy
as one command or one click.&lt;/p>
&lt;ol>
&lt;li>Obviously as requirements increase then users of software have to be aware of and meet those requirements.
&lt;em>However&lt;/em>, if one person wants to run one piece of software on one computer then yes&amp;hellip; it should be relatively low effort to allow them to do so.&lt;/li>
&lt;li>Some projects make this stuff a priority and package their Javascript or Python in a way where people can use it, but they are in the minority.&lt;/li>
&lt;li>If you only write software for yourself, to run personally or in a software-as-a-service scenario (a more and more common occurance), then do whatever you want.&lt;/li>
&lt;li>Lastly, I&amp;rsquo;m not saying that I&amp;rsquo;m perfect, but I do try to think about these things. And I&amp;rsquo;d like you to think about them with me.&lt;/li>
&lt;/ol>
&lt;h2 id="how-did-we-get-here">
How did we get here?
&lt;a class="heading-link" href="#how-did-we-get-here">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I wouldn’t normally blame the language for the output, but the language choice and tooling surrounding each language has created a cultural change around shipping software.&lt;/p>
&lt;p>As the open source movement exploaded, and languages like PHP, Javascript, Python and Ruby became popular, fewer and fewer people were writing software that was natively runnable. Similarly you have languages like Java where you were required to have an entire virtual machine installed to run the software.&lt;/p>
&lt;p>As &amp;ldquo;shipping source&amp;rdquo; became more common, the next step was inevitable. Developers simply pointed potential users to a repository of raw source code and said “good luck”.&lt;/p>
&lt;p>And while I&amp;rsquo;m being harsh here about choices we developers have made, I don&amp;rsquo;t place all the blame there. The developers using these languages haven&amp;rsquo;t been shipping software in a self-contained way because these tools simply don’t have a first-class way of doing so. However it is our fault when we collectively choose a tool because of the developer experience without thinking about the final shipped experience. It doesn&amp;rsquo;t seem like many Javascript developers are thinking &lt;em>&amp;ldquo;maybe I shouldn&amp;rsquo;t require my end user to know what npm is or force them to install node before they can play the game I made.&amp;quot;&lt;/em>&lt;/p>
&lt;h3 id="and-then-the-databases">
And then the databases
&lt;a class="heading-link" href="#and-then-the-databases">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>To make it all worse, we started treating database servers as a default dependency for almost any kind of software. Even for the most simple of data persistence cases. This means not only does a user have to understand how to get your software up and running, they have to understand how to spin up an entire database server just because you, as a developer, prefer to use PostgreSQL or MySQL. And don&amp;rsquo;t get me started when things require a relational database server AND Redis just to get running.&lt;/p>
&lt;h2 id="the-docker-workaround">
The Docker Workaround
&lt;a class="heading-link" href="#the-docker-workaround">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>As managing source code became more complex and developers wanted a way for potential users to not have to deal with it, many projects simply defaulted to shipping pre-configured container images as their only installation method.&lt;/p>
&lt;p>But I think we can all agree that if your software is so complex to install, with so many dependencies, that you’ve given up, and started shipping entire copies of a computer with it pre-installed, something is wrong.&lt;/p>
&lt;h2 id="why-does-this-matter">
Why does this matter?
&lt;a class="heading-link" href="#why-does-this-matter">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>The responsibilities and knowledge required to be a software developer, such as managing runtimes, installing dependencies, and running raw source code, have been duplicated and handed to the user to also be made their problem.&lt;/p>
&lt;h3 id="who-cares">
Who cares?
&lt;a class="heading-link" href="#who-cares">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>People who run open source, or non-commercial software are deeply knowledgeable about package managers, tool chains and programming languages, and I shouldn’t be so worked up about how software is shipped to them, right?&lt;/p>
&lt;/blockquote>
&lt;p>Well there lies the problem. &lt;strong>We need to build solutions for anybody who wants it.&lt;/strong> The world is falling apart right now due to the centralization and control of big tech. We need small tech to empower individuals and fight back. In order for that to happen everybody needs access to the tools we&amp;rsquo;re building. This means more single-user software that you can download and run without heaps of dependencies, just like the boxed software we talked about above. Just like the software you can find on your phone&amp;rsquo;s app store. Software is meant to be run.&lt;/p>
&lt;p>If you build a free and open source Yelp alternative for people it doesn&amp;rsquo;t matter how good it is if people get stuck fixing Ruby Version Manager conflicts. If you build an awesome game, but your users only have python2 and you wrote it for python3, that&amp;rsquo;s one fewer person to enjoy your game. If you build a self-hosted Eventbrite but the community leader doesn&amp;rsquo;t know what Postgresql is, then what was the point of building it?&lt;/p>
&lt;p>Besides, even if the software was &amp;ldquo;&lt;em>just for techies&lt;/em>&amp;rdquo;, don&amp;rsquo;t they deserve a nice experience setting up your software, too?&lt;/p>
&lt;h2 id="so-lets-fix-this">
So let’s fix this
&lt;a class="heading-link" href="#so-lets-fix-this">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;h3 id="ship-binaries">
Ship binaries
&lt;a class="heading-link" href="#ship-binaries">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>The good news is I think we’re getting on the right track. Languages that focus on shipping compiled, runnable binaries are on the rise. Go and Rust being two examples that are visibly changing the culture of shipping software to users. &lt;strong>This needs to continue.&lt;/strong>&lt;/p>
&lt;p>I’m not saying don’t use Ruby, or don’t use Python. But what I am saying is if you’re writing something with the goal of other people running your software, you need to ship software they can run. And some languages are simply going to be better than others at having first-class ways to accomplish that.&lt;/p>
&lt;h3 id="databases">
Databases
&lt;a class="heading-link" href="#databases">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>Let’s stop using external database servers as the default. Start with an embedded database like SQLite. If your software has the requirements then you can also offer a migration path to a larger database server. But a local, embedded database is fine for many more things than you think.&lt;/p>
&lt;h3 id="hosted-one-click-installs">
Hosted one-click installs
&lt;a class="heading-link" href="#hosted-one-click-installs">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h3>
&lt;p>It&amp;rsquo;s a bit off topic, but it&amp;rsquo;s still completely relevant in making sure that more people can install your software. Sure, this involves &amp;ldquo;the man&amp;rdquo;, but it&amp;rsquo;s a decent compromise. It&amp;rsquo;s free for you to make sure your software is available on the marketplaces of major hosting providers and it allows people who don&amp;rsquo;t have the physical resources to run your software using monetary resources instead.&lt;/p>
&lt;h2 id="in-conclusion">
In conclusion
&lt;a class="heading-link" href="#in-conclusion">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>Write code with the intention of shipping it as software. Code is not software.&lt;/p>
&lt;ol>
&lt;li>Let’s empower more people by getting more runnable software into their hands.&lt;/li>
&lt;li>When building, pick tools that let you do that.&lt;/li>
&lt;li>Chill it with the database requirements.&lt;/li>
&lt;li>Git and Docker aren’t installation methods.&lt;/li>
&lt;li>Any piece of software that requires the user to care, or even know, the details behind the scenes have failed the user.&lt;/li>
&lt;li>If you do exclusively software-as-a-service stuff and nobody needs to run your code but you, then do whatever you want.&lt;/li>
&lt;/ol></description></item><item><title>Being a part of a team</title><link>https://gabekangas.com/blog/2022/05/being-a-part-of-a-team/</link><pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate><guid>https://gabekangas.com/blog/2022/05/being-a-part-of-a-team/</guid><description>&lt;p>Growing up I was never a sports person, so I didn&amp;rsquo;t spend a lot of time on what you&amp;rsquo;d call &amp;ldquo;typical&amp;rdquo; teams. But I was heavily into the performing arts all throughout my youth. This included different organized groups such as choirs, theater performances, and both competitive and non-competitive bands of all kinds, including the stereotypical high school garage band. This continued on even after high school, where I took part in a couple competitive Drum &amp;amp; Bugle corps. I remember real gratification being a part of something special with people who are on the same page as you, working on a common
goal.&lt;/p>
&lt;p>But as everyone does, I grew up, took part in fewer activities, and focused on work.&lt;/p>
&lt;h2 id="corporate-teams">
Corporate Teams
&lt;a class="heading-link" href="#corporate-teams">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I think most people understand what work is and how it takes place. You show up at an office, and you get assigned coworkers. These coworkers are called your team. Maybe you&amp;rsquo;re on the engineering team, or the marketing team, or a leadership team of some sort. I never really though much of it. &amp;ldquo;These are my teammates!&amp;rdquo; I thought as I move through my career, one company after another, doing different things at different places.&lt;/p>
&lt;p>I never took a step back to really analyze what being a part of these teams looked like. But the pandemic changed things. So let me share it with you. As I have background in engineering teams, let&amp;rsquo;s use that as an example of what that looks like:&lt;/p>
&lt;ol>
&lt;li>A group of engineers are split into &amp;ldquo;cross-functional&amp;rdquo; groups of people to work on things.&lt;/li>
&lt;li>You show up to meetings consisting of &amp;ldquo;stakeholders&amp;rdquo; of this group, with people like a designer, a product manager, and a project manager.&lt;/li>
&lt;li>The product manager tells you how something is supposed to work.&lt;/li>
&lt;li>The designer tells you how it&amp;rsquo;s supposed to look.&lt;/li>
&lt;li>The project manager tells you the scheduling around the work.&lt;/li>
&lt;li>You go do the work, giving periodic updates, eventually letting them know when it&amp;rsquo;s done.&lt;/li>
&lt;li>Repeat.&lt;/li>
&lt;/ol>
&lt;p>The reality of the situation was far easier to mask before the pandemic. I would show up every day and and be around people. I&amp;rsquo;d be in the kitchen chatting while making coffee, we&amp;rsquo;d go to lunch. I&amp;rsquo;d do my work sitting next to these people. I&amp;rsquo;d look over and make a comment about something I just did. Being around people makes you, in some way, feel like you&amp;rsquo;re part of a team. The reality is actually quite different.&lt;/p>
&lt;ol>
&lt;li>The closest thing you have to a real &amp;ldquo;team&amp;rdquo;, your engineering peers, are immediately split up to make sure as much parallel work is happening at once.&lt;/li>
&lt;li>You never work &amp;ldquo;with&amp;rdquo; them.&lt;/li>
&lt;li>You never actually work &amp;ldquo;with&amp;rdquo; anybody.&lt;/li>
&lt;li>You&amp;rsquo;re on a team of one.&lt;/li>
&lt;/ol>
&lt;p>It&amp;rsquo;s like if an NBA team split up to compete in 1-1 games of horse or something. Sure, you can get together and discuss strategy in your daily standup, but you&amp;rsquo;re alone.&lt;/p>
&lt;h2 id="open-source">
Open Source
&lt;a class="heading-link" href="#open-source">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>As I moved through my adult, career-driven journey I always looked at open source projects with a sense of awe. There were these people, working together because they had a passion for it, not for the money like at a day job. I had this vision in my mind of wise cabals that work together to make a real difference for their users and combine to be greater than the sum of their parts.&lt;/p>
&lt;p>I&amp;rsquo;ve dreamt for years what it would be like to be a part of an open source community that operated this way. In my head it was a lot like that high school garage band. You are working &lt;em>together&lt;/em> because you &lt;em>love&lt;/em> it.&lt;/p>
&lt;p>I&amp;rsquo;ve had some &lt;a href="https://gabekangas.com/blog/2019/02/working-with-others-on-personal-projects/">misses in the past where things didn&amp;rsquo;t click&lt;/a>, and while that was disappointing, I never let the dream die.&lt;/p>
&lt;p>Owncast changed things. I made friends, and we worked together on a common goal, and I was &lt;a href="https://gabekangas.com/blog/2020/12/a-brief-update-on-owncast/">&lt;em>so happy&lt;/em>&lt;/a>. I saw this as a real team. And better yet, I had made real friends, something that that becomes more difficult, especially for men, as they get older.&lt;/p>
&lt;p>But it was short lived. Maybe I&amp;rsquo;m a bad project maintainer, or maybe I&amp;rsquo;m a bad person. Maybe people don&amp;rsquo;t like being around me, but those who I thought I was in that team with disappeared. I saw myself as the drummer in a kick ass band, but what I didn&amp;rsquo;t realize was I was an artist playing a drum solo hoping other people would eventually get on stage so we could start the song.&lt;/p>
&lt;p>Realistically, I&amp;rsquo;m not alone here. If you look at any open source project you&amp;rsquo;re probably going to see one person working on it, with a few contributors here and there. But for me I mistook casual contributors as friends, and that&amp;rsquo;s heartbreaking when you realize you were wrong.&lt;/p>
&lt;h2 id="conclusion">
Conclusion
&lt;a class="heading-link" href="#conclusion">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>I can&amp;rsquo;t help but think at this point: As an adult, &lt;strong>have I ever been on a team&lt;/strong>? Maybe you haven&amp;rsquo;t been either.&lt;/p>
&lt;p>I might be slightly different, as the stereotype of the &lt;em>introverted software engineer&lt;/em> is a real thing. They&amp;rsquo;re not driven by the energy in the room or the relationship of the person next to them, they just want to be left alone to get their work done.&lt;/p>
&lt;p>But I never cared about any of these stupid companies I worked for, I cared about the room of people. Once there was no room of people, and all that was left was the &lt;em>divide and conquer&lt;/em> approach of corporate management I realized I couldn&amp;rsquo;t rely on work for a sense of connection.&lt;/p>
&lt;p>But at least I had my Owncast crew. Until they were gone too.&lt;/p></description></item></channel></rss>